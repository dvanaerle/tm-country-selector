This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/copilot-instructions.md
.gitignore
.prettierrc
components.json
eslint.config.mjs
messages/de.json
messages/en.json
messages/fr.json
messages/nl.json
next.config.js
next.config.ts
package.json
postcss.config.mjs
public/brand/max.svg
public/brand/tm-logo.svg
public/icons/MingCute/arrow_right_line.svg
public/icons/MingCute/check_circle_line.svg
public/icons/MingCute/check_line.svg
public/icons/MingCute/close_line.svg
public/icons/MingCute/down_line.svg
public/icons/MingCute/information_line.svg
public/icons/MingCute/play_circle_fill.svg
public/icons/MingCute/up_line.svg
public/icons/MingCute/warning_line.svg
src/app/globals.css
src/app/layout.tsx
src/app/measuring-tool/page.tsx
src/app/not-found.tsx
src/app/page.tsx
src/components/header.tsx
src/components/home/StoreCard.tsx
src/components/home/StoreSelection.tsx
src/components/measuring-tool/CalculationResultAlert.tsx
src/components/measuring-tool/ClientSection.tsx
src/components/measuring-tool/FormStep.tsx
src/components/measuring-tool/formStepsConfig.ts
src/components/measuring-tool/GutterHeightResultView.tsx
src/components/measuring-tool/ImageSwitcher.tsx
src/components/measuring-tool/InfoTooltipSheet.tsx
src/components/measuring-tool/NumberInputWithUnit.tsx
src/components/measuring-tool/PassageHeightCalculatorForm.tsx
src/components/measuring-tool/PassageHeightResultView.tsx
src/components/measuring-tool/rangeMidpointUtil.ts
src/components/measuring-tool/YesNoRadioGroup.tsx
src/components/ui/alert.tsx
src/components/ui/button.tsx
src/components/ui/checkbox.tsx
src/components/ui/form.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/radio-group.tsx
src/components/ui/select.tsx
src/components/ui/sheet.tsx
src/components/ui/tabs.tsx
src/components/ui/video.tsx
src/data/stores.ts
src/hooks/usePassageHeightCalculator.ts
src/i18n/request.ts
src/lib/storeUtils.ts
src/lib/utils.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/copilot-instructions.md">
# Code Style and Conventions Standards

## Project-Specific Requirements (CRITICAL)

**Framework:** React with TypeScript and Next.js
**Internationalization:** next-intl
**Comment Language:** ALL code comments must be written in Dutch
**File Organization:** Feature-based directory structure required

---

## 1. Naming Conventions

### Priority: CRITICAL

**Rule:** Use descriptive and consistent naming conventions

**Decision Tree:**

- Variables/Functions → camelCase
- Components → PascalCase (file name must match component name)
- Constants → UPPER_SNAKE_CASE
- Classes/Interfaces → PascalCase
- i18n variables → consistent pattern (e.g., "i18n_key", "localizeMessage")

**Examples:**

```typescript
// ✅ Do This
const getUserProfile = () => {...}
const API_BASE_URL = 'https://api.example.com'
interface UserProfile {...}

// ❌ Don't Do This
const x = () => {...}
const api_url = 'https://api.example.com'
interface userprofile {...}
```

---

## 2. Component Design Standards

### 2.1 Component Architecture (CRITICAL)

**Decision Tree for Component Size:**

- If component > 200 lines → Break into smaller components
- If logic is reusable → Extract to custom hook
- If UI pattern repeats → Create reusable component

**Single Responsibility Principle:**
Each component must have ONE clear purpose.

```typescript
// ✅ Do This - Single responsibility
const UserAvatar = ({ user, size }: UserAvatarProps) => {...}
const UserContactInfo = ({ user }: UserContactInfoProps) => {...}

// ❌ Don't Do This - Multiple responsibilities
const UserComponent = ({ user }: Props) => {
  // Handles avatar, contact info, preferences, AND notifications
}
```

### 2.2 Functional Components (CRITICAL)

**Rule:** Always use functional components with hooks

**Exception:** Only use class components for legacy code integration

---

## 3. TypeScript Standards

### 3.1 Type Definitions (CRITICAL)

**Decision Tree:**

- Object shapes → Use `interface`
- Type aliases, unions, mapped types → Use `type`
- Can properties be optional? → Use `?` operator
- Need to extend/merge? → Use `interface`

```typescript
// ✅ Do This
interface UserProps {
  name: string;
  email?: string; // Optional property
}

type Status = "pending" | "complete" | "error"; // Union type

// ❌ Don't Do This
type UserProps = {
  // Should be interface for object shapes
  name: any; // Avoid 'any'
};
```

### 3.2 Nullability (CRITICAL)

**Rule:** Handle null/undefined explicitly

```typescript
// ✅ Do This
const processUser = (user: User | undefined) => {
  if (!user) return null;
  // Process user safely
};

// ❌ Don't Do This
const processUser = (user: any) => {
  return user.name; // Potential runtime error
};
```

---

## 4. Performance Optimization

### 4.1 Memoization (IMPORTANT)

**Decision Tree:**

- Component receives stable props + expensive renders → Use `React.memo`
- Expensive calculations in component → Use `useMemo`
- Functions passed as props → Use `useCallback`
- Simple components that rarely re-render → Skip memoization

```typescript
// ✅ Do This - When component has expensive renders
const ExpensiveComponent = React.memo(({ data }: Props) => {
  const processedData = useMemo(() =>
    expensiveCalculation(data), [data]
  );

  const handleClick = useCallback(() => {
    // Handle click
  }, []);

  return <div>{processedData}</div>;
});
```

### 4.2 Code Organization (IMPORTANT)

- Utility functions → `lib/utils.ts`
- Custom hooks → `hooks/` directory
- Reusable components → `components/` directory

---

## 5. Accessibility (CRITICAL)

**Requirements:**

- Semantic HTML elements
- Alt text for images
- Proper ARIA attributes
- Keyboard navigation support

```typescript
// ✅ Do This
<button
  onClick={handleSubmit}
  aria-label="Submit form"
  disabled={isLoading}
>
  Submit
</button>

// ❌ Don't Do This
<div onClick={handleSubmit}>Submit</div>
```

---

## 6. Code Comments (IMPORTANT)

**Rule:** All comments in Dutch, explain WHY not WHAT

```typescript
// ✅ Do This
// We gebruiken debounce hier om API calls te beperken tijdens het typen
const debouncedSearch = useMemo(() =>
  debounce(searchFunction, 300), []);

// ❌ Don't Do This
// This function searches for users
const searchUsers = () => {...}
```

---

## 7. When to Deviate

**Approved Exceptions:**

1. **Performance Requirements:** Document with Dutch comment explaining trade-off
2. **Third-party Integration:** When external library requires different pattern
3. **Legacy Code:** Only when refactoring would break functionality

**Required:** Always document deviations with Dutch comments explaining reasoning.

---

## 8. Tool Configuration

**Required Tools:**

- Prettier (automatic formatting)
- ESLint with TypeScript + unused-imports rules
- Remove dead code, commented blocks, unused imports

---

## Quick Reference Checklist

- [ ] Component names in PascalCase
- [ ] Dutch comments explaining complex logic
- [ ] TypeScript interfaces for object shapes
- [ ] Functional components with hooks
- [ ] Accessibility attributes included
- [ ] Memoization applied where beneficial
- [ ] Single responsibility per component
- [ ] Explicit null/undefined handling
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".prettierrc">
{
  "plugins": ["prettier-plugin-tailwindcss"]
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="public/brand/max.svg">
<svg width="157" height="206" viewBox="0 0 157 206" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_2006_9456)">
<path d="M52.2132 78.8178C52.2132 78.8178 57.5255 75.6606 58.4618 54.9671C58.4618 54.9671 57.9516 51.3286 56.968 50.8632C55.9845 50.3979 55.3901 47.209 55.3901 47.209L51.377 37.7057L58.467 34.9346C58.467 34.9346 65.7885 39.9427 66.5301 40.2441C67.2718 40.5456 76.3342 54.9618 76.3342 54.9618L88.6367 65.2371L87.0956 78.199L92.0712 79.96L94.4907 86.6816L83.561 96.3858H62.375C61.1863 96.3858 55.3954 91.0128 55.3954 90.2619C55.3954 89.5109 52.2185 78.8072 52.2185 78.8072L52.2132 78.8178Z" fill="white"/>
<path d="M90.8028 19.1756C91.9231 21.2064 92.3544 23.4645 92.8593 25.6856C94.4057 32.4707 96.6253 39.023 99.313 45.4431C100.823 49.0445 101.322 52.8839 101.233 56.8185C101.149 60.6103 99.4655 63.1434 95.952 64.5078C93.8219 65.3328 91.6338 65.9198 89.4405 66.4011C88.3413 68.5217 87.8311 73.0856 88.2203 77.3269C88.9093 78.0144 89.8403 78.2259 90.787 78.374C102.032 80.1774 112.957 83.2869 123.881 86.4441C129.798 88.1576 134.043 91.759 137.32 96.7777C141.533 103.224 144.452 110.279 146.934 117.529C149.038 123.68 150.89 129.904 152.278 136.261C152.594 137.705 153.356 139.011 153.446 140.56C153.525 141.93 153.961 143.279 154.224 144.543C153.277 145.346 152.168 144.722 151.184 145.41C151.179 148.049 152.057 150.629 152.515 153.274C153.688 160.117 155.534 166.838 156.239 173.766C156.807 179.367 156.249 184.861 154.214 190.118C151.352 197.511 144.841 201.44 136.962 200.753C132.37 200.351 128.047 198.96 123.813 197.257C114.419 193.481 105.735 188.368 97.288 182.825C94.0638 180.71 90.9027 178.51 87.8574 176.447C86.5004 176.395 85.6851 177.146 84.7857 177.653C74.3136 183.545 63.7311 189.224 52.9224 194.454C45.3485 198.119 37.6535 201.493 29.6483 204.159C23.0526 206.353 17.1933 205.089 11.8547 200.938C7.16834 197.289 3.48129 192.831 2.4872 186.755C1.91916 183.28 2.09799 179.737 2.50824 176.22C3.34979 168.959 4.13349 161.698 4.93822 154.432C4.97504 154.083 4.93822 153.728 4.93822 153.295C3.75479 152.565 2.43987 153.443 1.18806 153.2C1.06709 152.898 0.867217 152.65 0.888256 152.422C1.42474 146.203 1.41423 139.957 2.09273 133.733C2.80805 127.175 3.50759 120.623 4.90141 114.171C6.17951 108.232 7.76268 102.389 11.0079 97.1426C12.5753 94.6147 14.5845 92.621 17.1618 91.1508C22.595 88.0624 28.3439 85.7037 34.2716 83.8105C39.6838 82.0812 45.1644 80.5899 50.624 79.0139C51.1184 78.8711 51.6496 78.8764 52.2124 78.8077C53.2065 80.5211 54.0848 82.2293 55.1315 83.8211C57.3827 87.2427 60.2177 90.1037 63.7311 92.2296C70.2163 96.1483 76.9067 96.0003 83.5654 92.8589C88.3886 90.5849 90.7134 85.9787 90.1295 80.7115C90.0524 80.0169 89.558 79.4846 88.6463 79.1144C87.8942 80.0187 89.0829 81.3672 87.7101 82.5148C86.9317 79.7384 87.0894 77.1471 87.0106 74.5822C86.9317 72.0332 87.4103 69.5212 87.5944 67.0621C86.7423 66.4645 85.9323 66.7237 85.1749 66.7501C82.9711 66.8241 80.8041 66.5597 78.6424 66.1948C73.3774 65.3011 69.6956 62.3977 67.6654 57.4266C67.2341 56.369 66.8449 55.2954 66.5293 54.2007C66.3662 53.6401 66.219 52.9579 66.9974 52.6195C67.6812 54.3223 68.3071 56.0517 69.0539 57.7228C70.695 61.4035 73.4195 63.8415 77.3906 64.7141C83.1604 65.978 88.862 65.8299 94.4741 63.7939C98.8449 62.2074 100.06 60.642 100.091 56.0199C100.123 51.0118 98.8186 46.3051 96.6042 41.8364C95.6575 39.224 94.3952 36.7278 93.7324 34.0096C93.7167 33.9514 93.4379 33.962 93.2854 33.9408L93.3485 34.0202C93.9376 33.1476 93.3432 32.3173 93.1907 31.4976C92.8909 29.8635 92.4491 28.2611 92.0651 26.6428C92.4596 26.0188 92.2808 25.6116 91.6023 25.3842C91.0973 23.3376 90.5977 21.291 90.0927 19.2444C90.3294 19.2179 90.5661 19.1915 90.8028 19.165V19.1756ZM128.552 148.578C131.75 149.482 134.953 150.381 138.151 151.285C138.666 151.428 139.203 151.544 138.987 152.322C138.235 152.909 137.472 152.428 136.767 152.232C126.895 149.535 117.033 146.78 107.16 144.077C98.1243 141.607 89.0776 139.18 80.0309 136.758C77.7535 136.15 75.313 136.055 73.1933 134.981C66.4293 131.549 59.1815 130.021 51.7285 129.375C48.6989 129.111 42.3347 129.635 42.5924 129.672C42.0191 130.518 41.8823 143.384 41.2301 147.906C43.718 149.254 45.9849 150.407 48.1782 151.687C57.2512 156.997 66.3084 162.343 75.3656 167.69C80.4201 170.673 85.5641 173.523 90.4714 176.738C94.7213 179.52 98.8501 182.508 103.189 185.157C111.126 190.007 119.231 194.544 128.084 197.538C131.665 198.749 135.305 199.732 139.124 199.621C143.942 199.478 147.986 197.649 150.9 193.693C152.425 191.625 153.409 189.272 154.045 186.77C155.586 180.673 155.434 174.565 154.272 168.441C153.583 164.813 152.878 161.19 152.168 157.568C151.384 153.607 150.585 149.651 149.732 145.415C142.595 146.256 135.579 147.081 128.567 147.911C128.11 147.837 129.425 147.7 129.009 148.382C129.425 148.673 128.068 148.646 128.557 148.593L128.552 148.578ZM48.052 153.152C41.5878 154.987 35.3551 156.759 29.1223 158.52C24.4885 159.831 19.8495 161.127 15.2157 162.438C14.5477 162.629 13.8429 162.994 13.5589 161.561C21.9323 159.176 30.3005 156.79 38.695 154.4C38.9001 152.967 38.8633 151.692 38.7213 150.117C27.8547 151.084 17.1565 152.036 6.41094 152.988C5.38004 161.82 4.31232 170.535 3.34979 179.266C2.47142 187.236 5.24329 193.793 11.2867 198.96C16.5832 203.487 22.4688 205.349 29.3327 202.953C32.478 201.858 35.6391 200.822 38.7055 199.521C54.3794 192.868 69.3958 184.888 84.2071 176.511C84.6963 176.236 85.4274 176.162 85.4484 175.131C73.0776 167.854 60.6174 160.529 48.052 153.141V153.152ZM108.549 128.55C108.302 127.778 108.728 127.382 108.991 126.98C110.495 124.695 108.654 122.046 105.972 122.125C104.552 122.167 103.195 122.437 101.89 122.982C98.6345 124.336 95.6259 126.123 92.9172 128.371C90.0927 130.713 87.7837 133.532 85.501 136.8C92.2282 138.635 98.6029 140.375 104.967 142.115C106.345 141.057 107.576 140.079 108.849 139.154C110.111 138.233 110.979 136.753 112.72 136.457C111.663 139.296 108.681 140.359 106.871 142.707C110.285 143.638 113.472 144.506 116.638 145.362C118.295 143.691 119.605 142.02 118.926 139.672C118.211 137.197 116.176 136.509 113.646 136.467C114.64 134.865 115.765 133.596 115.923 131.845C116.197 128.757 114.492 127.144 111.479 127.757C110.49 127.958 109.522 128.291 108.56 128.566L108.549 128.55ZM48.9672 115.234C48.7778 118.016 49.1302 120.85 49.1986 123.616C51.3025 124.304 68.0493 123.743 70.3794 122.892C70.2584 120.142 70.1374 117.307 70.0165 114.547C67.5602 114.013 51.1289 114.547 48.9619 115.234H48.9672ZM123.592 146.917C123.46 146.261 123.345 145.59 123.181 144.934C121.525 138.186 119.857 131.443 118.195 124.695C116.975 119.745 115.771 114.79 114.508 109.851C114.298 109.031 114.429 107.883 113.235 107.592C112.467 108.439 112.936 109.2 113.114 109.93C115.387 119.153 117.675 128.371 119.957 137.588C120.631 140.322 121.283 143.056 121.982 145.785C122.166 146.505 122.277 147.467 123.597 146.922L123.592 146.917ZM45.9639 152.338C44.002 151.507 42.7186 148.789 39.9994 150.275C40.2466 151.55 39.7522 152.782 40.3886 153.982C42.3136 153.411 44.1388 152.877 45.9639 152.338Z" fill="#002E21"/>
<path d="M90.8029 19.1755C90.5662 19.202 90.3295 19.2284 90.0928 19.2549C87.6418 19.4558 85.3801 20.4289 83.0133 20.9895C77.4222 22.3116 71.8574 23.7712 66.077 24.0039C65.5353 24.025 65.0409 24.1466 64.3939 24.6755C64.5412 25.987 64.1099 27.4096 63.7785 28.8533C63.4419 30.3447 63.4419 31.799 63.8837 33.2533C62.6793 34.7975 60.8436 35.7653 59.9284 37.5739C59.8443 37.5845 59.7549 37.6056 59.6707 37.6109C55.6208 37.9018 54.6162 38.8696 54.2638 42.8412C52.5649 43.5604 51.7181 45.332 50.1454 46.2046C48.8831 44.1051 47.363 42.1642 46.3058 39.9378C43.9758 35.0196 43.3972 30.0379 45.9324 25.0139C46.5215 23.8505 47.3525 22.8087 48.1783 21.5448C47.5892 17.6525 48.6937 14.0352 51.271 10.9151C54.5057 6.99635 58.7029 4.57955 63.5839 3.33677C66.5031 2.5964 69.4748 2.45361 72.415 3.03005C73.4301 3.23101 74.0876 2.80793 74.8555 2.46419C78.9054 0.650265 82.9922 0.237769 87.3262 1.54929C91.3499 2.76563 93.317 5.58963 94.2269 9.39729C94.5951 10.9362 94.5215 12.5545 94.3058 14.1304C93.9955 16.3991 92.4755 17.8482 90.8029 19.1808V19.1755Z" fill="#FE7704"/>
<path d="M96.605 41.8424C98.814 46.3111 100.124 51.0125 100.092 56.0259C100.061 60.6479 98.8456 62.2133 94.4748 63.7998C88.8679 65.8359 83.1664 65.9839 77.3913 64.72C73.4202 63.8527 70.6957 61.4095 69.0547 57.7287C68.3078 56.0523 67.6819 54.3283 66.9981 52.6254C66.7614 50.0658 67.3347 47.4798 66.5247 44.9149C66.0093 43.2861 65.5307 41.6837 64.5997 40.2347C64.3788 39.8962 64.3683 39.4203 64.2578 39.0078C64.8101 38.1775 65.5254 37.5112 66.3354 36.9453C66.4301 37.4583 66.4932 37.9766 66.8982 38.3838C68.6391 40.1131 70.2854 41.9587 72.1263 43.5717C73.7147 44.9572 75.6082 45.7135 77.8331 45.6342C81.0415 45.5178 84.2131 44.7404 87.4426 45.0736C87.5741 45.7822 87.9685 46.089 88.6786 45.8457C89.457 45.5813 90.2302 45.3063 91.0086 45.0313C91.4662 44.9625 92.1921 45.3169 92.0816 44.3491L92.0553 44.2274C92.9389 44.8197 93.6122 44.4654 94.3012 43.8097C95.0323 43.1169 95.5635 42.1808 96.5892 41.8424H96.605ZM83.6345 49.4048C83.2769 51.0283 84.2394 51.6629 85.3019 51.8639C86.4011 52.0649 87.7581 52.5461 88.6365 50.7639C86.6746 51.224 85.0178 50.912 83.6345 49.4048Z" fill="#F5E6D7"/>
<path d="M58.0396 55.1369C55.6938 55.1845 54.058 54.1321 53.1113 51.9638C52.8693 51.4086 52.5011 50.9114 52.1855 50.3879C53.0639 49.1398 54.2263 48.1773 55.3887 47.2148C56.2566 48.4047 57.0771 49.6422 58.2921 50.4408C58.6813 52.0114 58.4393 53.4975 58.4604 54.9729C58.3447 55.0946 58.2026 55.1475 58.0396 55.1369Z" fill="#FE7704"/>
<path d="M58.0406 55.1366C58.2037 55.1472 58.3457 55.0943 58.4614 54.9727C59.2872 55.3852 59.1083 56.1573 59.061 56.8236C58.6244 63.3389 57.6093 69.7379 55.1004 75.8143C54.7165 76.7397 54.4219 77.808 52.9492 78.2099C53.6488 76.4965 54.3378 75.0157 54.869 73.4821C56.7257 68.1355 57.5725 62.5985 57.867 56.9611C57.8986 56.3529 57.9827 55.7448 58.0406 55.1366Z" fill="#002E21"/>
<path d="M55.3895 47.2153C54.2323 48.1778 53.0647 49.1403 52.1863 50.3883C51.5499 50.8326 50.9345 51.3191 50.2613 51.7104C49.4092 52.2076 48.5624 52.0754 47.8839 51.3614C47.1791 50.621 47.2212 49.7643 47.7629 48.9605C48.4414 47.9504 49.5828 47.3264 50.1456 46.2052C51.7235 45.3326 52.5703 43.561 54.2639 42.8418C54.5847 43.6879 54.2902 44.3067 53.6538 44.9149C52.6544 45.8668 51.7392 46.9139 50.661 48.0509C50.5926 48.3893 50.9924 48.585 51.5026 48.8864C52.544 47.9821 53.6222 47.0461 54.6426 46.1629C55.2948 46.348 55.3632 46.7658 55.3842 47.2153H55.3895ZM49.3987 49.0662C48.7885 49.4735 48.1521 49.8436 48.8201 50.6316C49.1462 51.0177 49.5775 50.8855 49.9036 50.5629C50.4822 49.9864 50.2613 49.5422 49.3987 49.0662Z" fill="#002E21"/>
<path d="M66.3458 36.9446C65.5358 37.5104 64.8205 38.1768 64.2682 39.0071C63.7738 39.2398 63.2899 39.4354 62.8375 38.658C63.1005 37.4628 64.8678 37.1561 64.9782 35.7494C63.9105 34.7235 63.4003 35.7653 62.8007 36.2624C61.9539 36.9552 61.3385 38.1027 59.9395 37.5739C60.8546 35.7653 62.6903 34.7975 63.8947 33.2533C65.278 33.3538 66.4615 32.1639 68.0604 32.5288C67.8658 34.2422 67.0874 35.5855 66.351 36.9393L66.3458 36.9446Z" fill="#002E21"/>
<path d="M60.0447 41.7568C59.9027 42.9679 58.6088 43.7506 59.0191 45.115C59.3873 46.3577 60.9704 46.2626 61.3176 47.463C59.0559 47.4736 57.783 46.5164 57.6516 44.7607C57.5306 43.1054 58.2564 42.1429 60.0447 41.7568Z" fill="#002E21"/>
<path d="M42.4468 129.618C45.4606 128.735 48.7006 129.111 51.7302 129.37C59.1832 130.015 66.431 131.543 73.195 134.976C75.3094 136.049 77.7552 136.144 80.0326 136.752C89.0793 139.175 98.126 141.602 107.162 144.072C117.035 146.769 126.897 149.524 136.769 152.226C137.474 152.417 138.236 152.898 138.989 152.316C139.199 151.539 138.668 151.422 138.152 151.28C134.949 150.381 131.751 149.476 128.553 148.572C128.553 148.345 128.559 148.117 128.564 147.89C135.58 147.065 142.597 146.235 149.729 145.394C150.581 149.635 151.38 153.591 152.164 157.546C152.879 161.169 153.584 164.792 154.268 168.419C155.43 174.543 155.583 180.657 154.042 186.749C153.411 189.256 152.422 191.604 150.897 193.672C147.983 197.622 143.938 199.457 139.12 199.6C135.301 199.716 131.662 198.727 128.08 197.516C119.223 194.523 111.123 189.986 103.186 185.136C98.8465 182.487 94.7177 179.499 90.4678 176.717C85.5605 173.502 80.4166 170.656 75.362 167.668C66.3048 162.322 57.2529 156.975 48.1746 151.666C45.9866 150.386 43.7197 149.233 41.2266 147.885C41.2739 142.411 42.4468 129.603 42.4468 129.603V129.618Z" fill="white"/>
<path d="M48.0528 153.152C60.6129 160.54 73.0732 167.864 85.4492 175.141C85.4282 176.172 84.6971 176.241 84.2079 176.521C69.3914 184.893 54.3802 192.878 38.7063 199.531C35.6451 200.832 32.4788 201.869 29.3335 202.963C22.4696 205.354 16.584 203.492 11.2875 198.971C5.24409 193.804 2.47223 187.246 3.3506 179.277C4.31312 170.545 5.37558 161.83 6.41174 152.999C17.1573 152.041 27.8555 151.089 38.7221 150.127C38.8641 151.703 38.9009 152.972 38.6958 154.411C30.3013 156.801 21.9331 159.186 13.5597 161.571C13.8437 163.004 14.5432 162.639 15.2165 162.449C19.8503 161.137 24.4893 159.842 29.1231 158.53C35.3559 156.769 41.5886 154.998 48.0528 153.162V153.152Z" fill="white"/>
<path d="M66.347 36.9452C67.0834 35.586 67.8618 34.2481 68.0564 32.5346C66.4575 32.1645 65.2741 33.3596 63.8908 33.2591C63.449 31.7996 63.449 30.3505 63.7856 28.8592C64.1117 27.4208 64.5482 25.9929 64.401 24.6814C65.0479 24.1525 65.5423 24.0309 66.0841 24.0097C71.8645 23.7718 77.424 22.3122 83.0203 20.9953C85.3871 20.4348 87.6488 19.4617 90.0998 19.2607C90.6048 21.3074 91.1044 23.354 91.6094 25.4006C90.5732 25.5539 89.3319 25.3636 89.0637 26.8866C90.1893 27.5953 91.0781 26.4847 92.0722 26.6592C92.4562 28.2775 92.9033 29.8799 93.1978 31.514C93.3451 32.3337 93.9447 33.1587 93.3556 34.0365C92.5824 33.8409 92.5982 32.5981 91.5989 32.7039C90.326 34.449 90.5154 35.163 92.5246 36.0673C92.6824 35.8822 92.9296 35.7077 92.9927 35.4856C93.1399 34.9937 93.1925 34.4702 93.2872 33.9572C93.445 33.9784 93.7238 33.9731 93.7343 34.026C94.4023 36.7442 95.6593 39.2403 96.6061 41.8528C95.5752 42.1913 95.044 43.1326 94.3181 43.8201C93.6291 44.4706 92.9559 44.8302 92.0722 44.2379C93.7974 41.4297 93.7764 40.8903 91.8566 38.3625C91.4305 37.8019 90.9992 37.2466 90.568 36.6966C88.1748 33.6611 86.5443 30.3241 86.4654 26.3578C86.4654 26.252 86.2445 26.1462 86.0867 26.0035C85.324 26.3948 85.3556 27.1246 85.3766 27.8121C85.4398 30.1549 86.255 32.2808 87.3858 34.2904C88.3799 36.0567 89.637 37.6379 90.8835 39.2245C92.614 41.4244 92.1722 42.9316 89.6002 44.1427C88.8954 44.4759 88.017 44.4018 87.47 45.0734C84.2353 44.735 81.0689 45.5177 77.8605 45.634C75.6357 45.7133 73.7422 44.9571 72.1538 43.5715C70.3076 41.9586 68.6666 40.1129 66.9256 38.3836C66.5154 37.9764 66.4575 37.4634 66.3628 36.9452H66.347ZM80.0486 29.4198C77.6028 27.4049 75.136 27.8756 74.0209 30.5779C76.493 30.8476 78.4706 30.4669 80.0486 29.4198ZM80.2695 34.9409C78.6968 36.9029 78.8336 37.5956 80.9427 39.0817C82.9414 37.5851 82.7678 36.2471 80.2695 34.9409Z" fill="white"/>
<path d="M108.549 128.55C109.511 128.281 110.479 127.947 111.468 127.741C114.482 127.128 116.191 128.741 115.912 131.829C115.755 133.579 114.629 134.849 113.635 136.451C116.165 136.493 118.2 137.181 118.916 139.656C119.594 142.004 118.284 143.675 116.628 145.346C113.461 144.484 110.274 143.617 106.86 142.691C108.67 140.338 111.652 139.28 112.709 136.441C110.973 136.737 110.1 138.223 108.838 139.138C107.565 140.063 106.334 141.041 104.956 142.099C98.5869 140.359 92.2174 138.619 85.4902 136.784C87.7729 133.521 90.0819 130.697 92.9064 128.355C95.6151 126.107 98.6237 124.319 101.879 122.966C103.184 122.421 104.541 122.151 105.961 122.109C108.649 122.035 110.49 124.684 108.98 126.964C108.712 127.366 108.286 127.762 108.538 128.534L108.549 128.55ZM95.1313 138.059C98.9445 134.272 103.531 131.665 107.944 128.772C104.067 129.291 101.122 131.596 98.2134 133.881C96.8775 134.933 95.1944 135.854 95.126 138.053L95.1313 138.059Z" fill="white"/>
<path d="M48.9686 115.234C51.1356 114.552 67.5669 114.013 70.0232 114.547C70.1442 117.307 70.2652 120.142 70.3861 122.892C68.0561 123.738 51.3092 124.304 49.2053 123.616C49.1317 120.85 48.7793 118.011 48.9739 115.234H48.9686ZM57.7629 121.559C57.1895 119.597 57.7366 118.058 57.2106 116.636C56.49 116.35 55.8325 116.308 55.1909 116.763C54.7543 117.81 54.7859 119.015 54.1284 119.983C53.3342 119.01 53.492 117.603 52.6504 116.689C52.014 116.519 51.4249 116.392 50.899 116.826C50.515 121.247 50.5939 121.67 51.9299 122.315C52.5978 121.607 51.993 120.639 52.4243 119.888C53.3868 120.454 52.6241 122.606 54.5702 122.278C55.3802 121.533 55.2435 120.39 55.7484 119.518C56.1744 120.359 55.7326 121.332 56.3375 122.167H59.0936C59.73 121.342 60.5189 120.454 61.4289 121.39C62.1863 122.173 62.9331 121.998 63.7694 122.088C64.9581 122.215 65.2158 121.03 65.8733 120.549C66.7727 121.125 67.1935 122.575 68.5189 121.416C67.9667 120.618 67.4302 119.835 66.9778 119.174C67.1304 117.989 68.2349 117.323 68.0929 116.239C66.6044 115.631 66.494 117.18 65.684 117.487C64.9897 116.948 64.7004 115.382 63.2855 116.614C63.7011 117.487 64.49 118.138 64.6531 119.047C64.4059 119.862 64.0429 120.491 63.3013 121.226C62.6491 119.518 62.0653 117.989 61.5183 116.551C60.6925 116.207 60.035 116.176 59.2934 116.662C58.8516 118.074 58.3835 119.56 57.7576 121.564L57.7629 121.559Z" fill="white"/>
<path d="M123.733 147.356C123.36 147.362 122.829 147.108 122.666 147.034C122.34 146.886 122.145 146.547 122.04 146.209C121.861 145.638 121.772 145.035 121.63 144.453C121.445 143.707 121.261 142.956 121.077 142.211C120.714 140.714 120.357 139.217 119.989 137.721C119.978 137.679 119.967 137.631 119.957 137.589C117.674 128.371 115.392 119.153 113.114 109.93C112.935 109.2 112.467 108.439 113.235 107.593C114.429 107.884 114.298 109.031 114.508 109.851C115.77 114.79 116.975 119.746 118.195 124.695C118.937 127.71 119.683 130.724 120.425 133.739C121.167 136.753 121.924 139.688 122.624 142.671C122.855 143.453 123.886 147.356 123.728 147.356H123.733Z" fill="white"/>
<path d="M44.055 128.207C43.7184 128.254 42.4876 128.619 42.4455 128.561C42.3929 128.492 42.8505 120.835 43.3502 117.164C43.5027 116.049 43.6763 114.933 44.034 113.859C44.0445 113.827 44.0603 113.79 44.0866 113.769C44.1234 113.743 44.1707 113.748 44.2128 113.759C44.9965 113.923 44.8966 115.123 44.8492 115.71C44.7651 116.72 44.6125 117.725 44.5284 118.74C44.2812 121.802 44.0708 128.212 44.0603 128.212L44.055 128.207Z" fill="white"/>
<path d="M45.9645 152.337C44.1394 152.877 42.3195 153.411 40.3892 153.982C39.7528 152.781 40.2472 151.549 40 150.275C42.7193 148.789 44.0026 151.512 45.9645 152.337Z" fill="white"/>
<path d="M92.0652 26.6483C91.0658 26.4738 90.1822 27.5843 89.0566 26.8757C89.3301 25.3526 90.5714 25.5377 91.6023 25.3896C92.2756 25.617 92.4544 26.0243 92.0652 26.6483Z" fill="#FE7704"/>
<path d="M87.4581 45.0729C88.0104 44.4013 88.8835 44.47 89.5883 44.1422C92.1603 42.9364 92.6073 41.4239 90.8716 39.2239C89.6198 37.6374 88.3628 36.0509 87.3739 34.2899C86.2431 32.2803 85.4278 30.1543 85.3647 27.8116C85.3437 27.1241 85.3174 26.3943 86.0748 26.0029C86.2326 26.1457 86.4535 26.2462 86.4535 26.3573C86.5376 30.3236 88.1681 33.6605 90.5561 36.6961C90.9926 37.2461 91.4239 37.8014 91.8447 38.3619C93.7645 40.8951 93.7855 41.4292 92.0603 44.2373L92.0866 44.359C91.608 44.396 91.2661 44.6498 91.0136 45.0412C90.2352 45.3109 89.462 45.5912 88.6836 45.8556C87.9735 46.0936 87.5843 45.7869 87.4476 45.0835L87.4581 45.0729Z" fill="#002E21"/>
<path d="M83.6349 49.4043C85.0182 50.9115 86.675 51.2235 88.6369 50.7634C87.7638 52.5456 86.4068 52.0644 85.3022 51.8634C84.2345 51.6677 83.2773 51.0331 83.6349 49.4043Z" fill="#002E21"/>
<path d="M91.0254 45.0357C91.2779 44.6444 91.6197 44.3905 92.0984 44.3535C92.2088 45.3213 91.483 44.967 91.0254 45.0357Z" fill="white"/>
<path d="M49.3987 49.0654C50.2613 49.5467 50.4822 49.9856 49.9036 50.562C49.5775 50.8899 49.1462 51.0221 48.8201 50.6308C48.1521 49.8375 48.7885 49.4726 49.3987 49.0654Z" fill="#F5E6D7"/>
<path d="M80.0471 29.4195C78.4692 30.4719 76.4916 30.8474 74.0195 30.5777C75.1346 27.8753 77.6014 27.3993 80.0471 29.4195Z" fill="#FE7704"/>
<path d="M80.2696 34.9404C82.7679 36.252 82.9415 37.5846 80.9428 39.0813C78.8337 37.5952 78.7022 36.9024 80.2696 34.9404Z" fill="#002E21"/>
<path d="M93.285 33.9463C93.1903 34.4539 93.1377 34.9775 92.9904 35.4746C92.9221 35.702 92.6801 35.8712 92.5223 36.0563C90.5131 35.152 90.3238 34.4381 91.5966 32.6929C92.596 32.5871 92.5802 33.8299 93.3534 34.0256L93.2902 33.9463H93.285Z" fill="#002E21"/>
<path d="M95.1328 138.059C95.2012 135.859 96.879 134.934 98.2203 133.887C101.129 131.602 104.069 129.297 107.951 128.778C103.538 131.666 98.9514 134.273 95.1381 138.065L95.1328 138.059Z" fill="#002E21"/>
<path d="M57.7622 121.559C58.3881 119.56 58.8562 118.069 59.298 116.657C60.0397 116.17 60.6971 116.202 61.5229 116.546C62.0699 117.984 62.6537 119.513 63.3059 121.221C64.0423 120.491 64.4105 119.856 64.6577 119.042C64.4999 118.132 63.7109 117.482 63.2901 116.609C64.705 115.372 64.9943 116.943 65.6886 117.482C66.4986 117.175 66.6143 115.626 68.0975 116.234C68.2395 117.318 67.135 117.984 66.9825 119.169C67.4348 119.825 67.9713 120.607 68.5235 121.411C67.1981 122.569 66.7721 121.12 65.8779 120.544C65.2204 121.025 64.9575 122.215 63.774 122.083C62.9377 121.993 62.1909 122.167 61.4335 121.385C60.5235 120.449 59.7346 121.332 59.0982 122.162H56.3421C55.7372 121.321 56.179 120.354 55.753 119.513C55.2428 120.391 55.3796 121.528 54.5748 122.273C52.6287 122.596 53.3914 120.443 52.4289 119.878C51.9976 120.629 52.6024 121.602 51.9345 122.305C50.5985 121.66 50.5196 121.237 50.9036 116.816C51.4295 116.382 52.0186 116.514 52.655 116.678C53.4966 117.593 53.3388 119 54.133 119.973C54.7957 119.005 54.7589 117.799 55.1955 116.752C55.8424 116.297 56.4946 116.34 57.2152 116.625C57.7412 118.048 57.1942 119.587 57.7675 121.549L57.7622 121.559ZM60.4604 118.117C60.0712 118.73 59.9134 119.206 60.492 119.645C61.1126 119.121 60.7707 118.693 60.4604 118.117Z" fill="#002E21"/>
<path d="M60.46 118.116C60.7756 118.698 61.1122 119.121 60.4916 119.645C59.913 119.206 60.0708 118.73 60.46 118.116Z" fill="#F5E6D7"/>
</g>
<defs>
<clipPath id="clip0_2006_9456">
<rect width="155.556" height="204.444" fill="white" transform="translate(0.888672 0.777344)"/>
</clipPath>
</defs>
</svg>
</file>

<file path="public/brand/tm-logo.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 96 61">
  <path fill="#fff" d="M10.826 13.374h2.3v29.044h-2.588V15.93H0L31.758.05l1.146 2.286-22.078 11.038Zm74.35-.05h-2.303v46.64h1.569V15.88H96L64.243 0l-1.145 2.285 22.078 11.038Zm-62.958 32.58c-1.519 3.737-3.193 7.483-4.596 11.269-1.4-3.784-3.076-7.532-4.595-11.27h-2.49v14.063h1.74v-6.66c.048-1.847-.152-3.694-.098-5.54a111.99 111.99 0 0 0 2.174 5.41c.956 2.263 1.912 4.528 2.87 6.79h.795c.958-2.262 1.914-4.527 2.87-6.79a111.99 111.99 0 0 0 2.174-5.41c.054 1.846-.146 3.693-.099 5.54v6.66h1.74V45.903h-2.488.003Zm11.664 7.28v6.782H32.51l-.188-1.087c-.78.875-1.712 1.343-3.128 1.335-1.018.006-1.728-.231-2.364-.813-1.319-1.306-1.248-3.864.37-4.903 1.503-.973 3.419-.703 5.044-.212-.015-.72.125-1.538-.346-2.15-.534-.74-1.498-1.012-2.374-.983-.933-.027-1.838.235-2.716.515v-1.373c1.434-.56 3.051-.757 4.552-.353.824.222 1.593.713 2.055 1.438.355.526.476 1.176.465 1.801m-1.634 2.407c-1.208-.266-2.534-.604-3.724-.098-1.102.487-1.182 2.135-.362 2.918.626.52 1.526.549 2.277.32a4.55 4.55 0 0 0 1.785-1.088c.073-.679.015-1.368.026-2.05m39.75-2.407v6.783h-1.373l-.187-1.087c-.778.875-1.712 1.343-3.128 1.335-1.018.006-1.728-.231-2.364-.813-1.32-1.306-1.248-3.864.37-4.903 1.502-.973 3.419-.703 5.044-.212-.015-.72.127-1.538-.346-2.15-.535-.74-1.498-1.012-2.374-.983-.933-.027-1.838.235-2.716.515v-1.373c1.433-.56 3.051-.757 4.554-.353.823.222 1.592.713 2.054 1.438.356.526.476 1.176.465 1.801m-1.637 2.407c-1.208-.266-2.534-.604-3.724-.098-1.102.487-1.182 2.135-.362 2.918.627.52 1.526.549 2.277.32a4.528 4.528 0 0 0 1.783-1.088c.073-.679.015-1.368.026-2.05m11.094-2.407v6.783H80.08l-.186-1.087c-.78.875-1.712 1.343-3.127 1.335-1.019.006-1.73-.231-2.365-.813-1.32-1.306-1.248-3.864.37-4.903 1.503-.973 3.419-.703 5.044-.212-.015-.72.127-1.538-.347-2.15-.533-.74-1.497-1.012-2.373-.983-.933-.027-1.838.235-2.716.515v-1.373c1.433-.56 3.051-.757 4.554-.353.823.222 1.592.713 2.055 1.438.355.526.475 1.176.465 1.801m-1.638 2.407c-1.208-.266-2.534-.604-3.724-.098-1.102.487-1.182 2.135-.362 2.918.626.52 1.526.549 2.277.32a4.548 4.548 0 0 0 1.785-1.088c.073-.679.015-1.368.026-2.05m-27.771-5.761c-.962.19-1.78.815-2.377 1.572l-.3-1.38h-1.283v9.945h1.655v-7.06c.523-.843 1.37-1.556 2.37-1.735.55-.058 1.155-.058 1.629.27.62.387.867 1.16.856 1.859v6.666h1.647v-6.894c0-.165.087-.293.176-.416.631-.812 1.547-1.514 2.62-1.51.605-.047 1.242.165 1.64.635.376.493.466 1.133.495 1.735v6.449h1.588l-.003-6.995c.03-1.173-.59-2.426-1.707-2.9-1.168-.523-2.594-.44-3.68.246-.57.373-1.022.888-1.453 1.406-.208-.347-.397-.712-.678-1.007-.769-.897-2.082-1.154-3.197-.888M43.927 59.98l-3.784-5.081 3.658-4.876h-1.803L39.325 53.8l-2.814-3.778h-1.803l3.657 4.879-3.783 5.08 1.76-.012 2.856-3.957 2.967 3.957 1.76.012.002-.002Zm2.606-9.958h-1.637v9.958h1.637v-9.958Zm0-4.151h-1.637v1.793h1.637V45.87Zm-2.402-28.73v25.113h3.166V17.141H44.13Zm8.875 0v25.113h3.078c0-4.713.008-9.428-.002-14.142.022-1.697-.098-3.389-.134-5.086-.031-.553-.13-1.106-.073-1.66.308.354.532.769.792 1.158 1.895 2.92 3.882 5.781 5.9 8.619 2.613 3.706 5.22 7.407 7.835 11.111h3.073v-25.11h-3.087l.003 14.934c.013.659-.012 1.32.075 1.974.04.815.013 1.632.064 2.447.065.494.097.994.073 1.493a3.365 3.365 0 0 1-.406-.506c-2.248-3.514-4.645-6.929-7.06-10.33-2.35-3.337-4.712-6.673-7.056-10.013h-3.077l.002-.002Zm-17.615 0v15.92c-.08 1.378-.27 2.806-.982 4.018-.676 1.202-1.813 2.146-3.135 2.556a8.575 8.575 0 0 1-2.654.38 8.575 8.575 0 0 1-2.655-.38c-1.322-.41-2.459-1.354-3.134-2.556-.713-1.212-.9-2.64-.982-4.019V17.141h-3.022V33.17a11.92 11.92 0 0 0 .573 3.829c.521 1.595 1.487 3.07 2.873 4.043 1.654 1.147 3.689 1.636 5.68 1.67a26.945 26.945 0 0 0 1.333 0c1.991-.034 4.026-.523 5.68-1.67 1.386-.973 2.352-2.448 2.873-4.043a11.9 11.9 0 0 0 .572-3.83V17.142h-3.02Z"/>
</svg>
</file>

<file path="public/icons/MingCute/arrow_right_line.svg">
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><g fill='none' fill-rule='nonzero'><path d='M24 0v24H0V0h24ZM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01-.184-.092Z'/><path fill='currentColor' d='m14.707 5.636 5.657 5.657a1 1 0 0 1 0 1.414l-5.657 5.657a1 1 0 0 1-1.414-1.414l3.95-3.95H4a1 1 0 1 1 0-2h13.243l-3.95-3.95a1 1 0 1 1 1.414-1.414Z'/></g></svg>
</file>

<file path="public/icons/MingCute/check_circle_line.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="none"><path d="M24 0v24H0V0zM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01z"/><path fill="currentColor" d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2m0 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16m3.535 4.381a1 1 0 0 1 1.498 1.32l-.083.094-5.586 5.587a1.1 1.1 0 0 1-1.46.085l-.096-.085-2.758-2.758a1 1 0 0 1 1.32-1.498l.094.084 2.122 2.121 4.95-4.95Z"/></g></svg>
</file>

<file path="public/icons/MingCute/check_line.svg">
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><g fill='none' fill-rule='evenodd'><path d='M24 0v24H0V0zM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01z'/><path fill='currentColor' d='M21.192 5.465a1 1 0 0 1 0 1.414L9.95 18.122a1.1 1.1 0 0 1-1.556 0l-5.586-5.586a1 1 0 1 1 1.415-1.415l4.95 4.95L19.777 5.465a1 1 0 0 1 1.414 0Z'/></g></svg>
</file>

<file path="public/icons/MingCute/close_line.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="none" fill-rule="evenodd"><path d="M24 0v24H0V0zM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01z"/><path fill="currentColor" d="m12 13.414 5.657 5.657a1 1 0 0 0 1.414-1.414L13.414 12l5.657-5.657a1 1 0 0 0-1.414-1.414L12 10.586 6.343 4.929A1 1 0 0 0 4.93 6.343L10.586 12l-5.657 5.657a1 1 0 1 0 1.414 1.414z"/></g></svg>
</file>

<file path="public/icons/MingCute/down_line.svg">
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><g fill='none' fill-rule='evenodd'><path d='M24 0v24H0V0h24ZM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01-.184-.092Z'/><path fill='currentColor' d='M12.707 15.707a1 1 0 0 1-1.414 0L5.636 10.05A1 1 0 1 1 7.05 8.636l4.95 4.95 4.95-4.95a1 1 0 0 1 1.414 1.414l-5.657 5.657Z'/></g></svg>
</file>

<file path="public/icons/MingCute/information_line.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="none"><path d="M24 0v24H0V0zM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01z"/><path fill="currentColor" d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2m0 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16m-.01 6c.558 0 1.01.452 1.01 1.01v5.124A1 1 0 0 1 12.5 18h-.49A1.01 1.01 0 0 1 11 16.99V12a1 1 0 1 1 0-2zM12 7a1 1 0 1 1 0 2 1 1 0 0 1 0-2"/></g></svg>
</file>

<file path="public/icons/MingCute/play_circle_fill.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96" fill="none"><path fill="currentColor" d="M48 8c22.091 0 40 17.909 40 40S70.091 88 48 88 8 70.091 8 48 25.909 8 48 8ZM35.858 34.602l-.216 1.995-.119 1.336-.168 2.396-.095 1.84-.07 2.024-.04 2.193v2.315l.04 2.194.07 2.024.095 1.842.169 2.396.285 2.92.05.411c.385 3.154 3.672 5.062 6.606 3.815l1.824-.806 2.603-1.236 1.562-.784 1.718-.897 1.863-1.011 1.993-1.128 1.973-1.163c.315-.189.624-.376.925-.56l1.721-1.075 1.548-1.002 1.37-.916 2.612-1.84.708-.526c2.551-1.92 2.536-5.725-.005-7.633l-1.623-1.185-1.1-.772-1.284-.873-2.256-1.473-1.715-1.072-1.876-1.128-1.997-1.153-1.914-1.06-1.785-.949-1.641-.839-2.16-1.053-1.756-.81-.921-.407a67.203 67.203 0 0 0-.38-.164c-2.928-1.248-6.227.648-6.614 3.814Z"/></svg>
</file>

<file path="public/icons/MingCute/up_line.svg">
<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'><g fill='none' fill-rule='evenodd'><path d='M24 0v24H0V0h24ZM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01-.184-.092Z'/><path fill='currentColor' d='M11.293 8.293a1 1 0 0 1 1.414 0l5.657 5.657a1 1 0 0 1-1.414 1.414L12 10.414l-4.95 4.95a1 1 0 0 1-1.414-1.414l5.657-5.657Z'/></g></svg>
</file>

<file path="public/icons/MingCute/warning_line.svg">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><g fill="none"><path d="M24 0v24H0V0zM12.593 23.258l-.011.002-.071.035-.02.004-.014-.004-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01-.017.428.005.02.01.013.104.074.015.004.012-.004.104-.074.012-.016.004-.017-.017-.427c-.002-.01-.009-.017-.017-.018m.265-.113-.013.002-.185.093-.01.01-.003.011.018.43.005.012.008.007.201.093c.012.004.023 0 .029-.008l.004-.014-.034-.614c-.003-.012-.01-.02-.02-.022m-.715.002a.023.023 0 0 0-.027.006l-.006.014-.034.614c0 .012.007.02.017.024l.015-.002.201-.093.01-.008.004-.011.017-.43-.003-.012-.01-.01z"/><path fill="currentColor" d="M12 2c5.523 0 10 4.477 10 10s-4.477 10-10 10S2 17.523 2 12 6.477 2 12 2m0 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16m0 11a1 1 0 1 1 0 2 1 1 0 0 1 0-2m0-9a1 1 0 0 1 1 1v6a1 1 0 1 1-2 0V7a1 1 0 0 1 1-1"/></g></svg>
</file>

<file path="src/components/measuring-tool/ClientSection.tsx">
"use client";

// Nederlands commentaar: Deze component bevat Tabs, afbeelding en forms.
import React, { useState } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { PassageHeightCalculatorForm } from "@/components/measuring-tool/PassageHeightCalculatorForm";
import { ImageSwitcher } from "@/components/measuring-tool/ImageSwitcher";
import MeasuringHeightPaving from "/public/images/measuring-height-paving.jpg";
import MeasuringHeightRecessed from "/public/images/measuring-height-recessed.jpg";

interface ClientSectionProps {
  measuringHeightPavingAlt: string;
  measuringHeightRecessedAlt: string;
  tabsHeightBottomGutter: string;
  tabsWallProfileHeight: string;
  heading: React.ReactNode;
}

export const ClientSection: React.FC<ClientSectionProps> = ({
  measuringHeightPavingAlt,
  measuringHeightRecessedAlt,
  tabsHeightBottomGutter,
  tabsWallProfileHeight,
  heading,
}) => {
  const [selectedTab, setSelectedTab] = useState<
    "height-lower-gutter" | "wall-profile-height"
  >("height-lower-gutter");

  // Bepaal afbeelding en alt op basis van geselecteerde tab
  const imageObj =
    selectedTab === "height-lower-gutter"
      ? MeasuringHeightPaving
      : MeasuringHeightRecessed;
  const imageAlt =
    selectedTab === "height-lower-gutter"
      ? measuringHeightPavingAlt
      : measuringHeightRecessedAlt;

  return (
    <section className="grid grid-cols-12 items-start lg:gap-x-10">
      {/* Afbeelding */}
      <div className="col-span-12 lg:sticky lg:top-6 lg:col-span-7">
        <ImageSwitcher
          src={
            selectedTab === "height-lower-gutter"
              ? MeasuringHeightPaving
              : MeasuringHeightRecessed
          }
          alt={
            selectedTab === "height-lower-gutter"
              ? measuringHeightPavingAlt
              : measuringHeightRecessedAlt
          }
          selectedTab={selectedTab}
        />
      </div>

      {/* Calculator + tabs */}
      <section
        className="col-span-12 rounded-b-lg bg-white p-5 lg:col-span-5 lg:rounded-lg xl:p-10"
        role="region"
        aria-labelledby="measuring-tool-heading"
      >
        <h1 id="measuring-tool-heading" className="mb-5 text-2xl font-bold">
          {heading}
        </h1>
        <Tabs
          defaultValue="height-lower-gutter"
          value={selectedTab}
          onValueChange={(value) =>
            setSelectedTab(
              value as "height-lower-gutter" | "wall-profile-height",
            )
          }
        >
          <TabsList role="tablist">
            <TabsTrigger value="height-lower-gutter" role="tab">
              {tabsHeightBottomGutter}
            </TabsTrigger>
            <TabsTrigger value="wall-profile-height" role="tab">
              {tabsWallProfileHeight}
            </TabsTrigger>
          </TabsList>
          <TabsContent value="wall-profile-height" role="tabpanel">
            <PassageHeightCalculatorForm
              formType="wallProfile"
              mainInputLabelKey="Form.WallProfileHeight.label"
              mainInputPlaceholderKey="Form.WallProfileHeight.placeholder"
              mainInputTooltipKey="Form.WallProfileHeight.tooltip"
              submitButtonTextKey="Form.Common.calculatePassageHeight"
            />
          </TabsContent>
          <TabsContent value="height-lower-gutter" role="tabpanel">
            <PassageHeightCalculatorForm
              formType="gutterHeight"
              mainInputLabelKey="Form.HeightBottomGutter.label"
              mainInputPlaceholderKey="Form.HeightBottomGutter.placeholder"
              mainInputTooltipKey="Form.HeightBottomGutter.tooltip"
              submitButtonTextKey="Form.Common.calculateBottomWallProfileHeight"
            />
          </TabsContent>
        </Tabs>
      </section>
    </section>
  );
};
</file>

<file path="src/components/measuring-tool/formStepsConfig.ts">
import { StaticImageData } from "next/image";
import MeasuringWidthFront from "/public/images/measuring-width-front.jpg";
import MeasuringWidthSide from "/public/images/measuring-width-side.jpg";
import MeasuringHeightRecessed from "/public/images/measuring-height-recessed.jpg";
import MeasuringSlope from "/public/images/measuring-slope.jpg";
import MeasuringHeightPaving from "/public/images/measuring-height-paving.jpg";

export type FormStepType =
  | "radio-group"
  | "number-input"
  | "yes-no"
  | "custom"
  | "custom-select";

export interface FormStepConfig {
  name: string;
  type: FormStepType;
  labelKey: string;
  placeholderKey?: string;
  tooltipKey?: string;
  images?: {
    src: string | StaticImageData;
    alt: string;
    captionKey?: string;
  }[];
  options?: { value: string; labelKey: string }[];
  disabledOnStep?: number;
  unitKey?: string;
  min?: number;
  max?: number;
}

export const wallProfileSteps: FormStepConfig[] = [
  {
    name: "depth",
    type: "radio-group",
    labelKey: "Form.Common.depthVeranda",
    tooltipKey: "Form.Common.depthVerandaTooltip",
    images: [
      {
        src: MeasuringWidthFront,
        alt: "Pages.MeasuringTool.MeasuringWidthFrontAlt",
        captionKey: "Form.Common.MeasuringWidthFrontCaption",
      },
      {
        src: MeasuringWidthSide,
        alt: "Pages.MeasuringTool.MeasuringWidthSideAlt",
        captionKey: "Form.Common.MeasuringWidthSideCaption",
      },
    ],
    options: [
      { value: "2.5", labelKey: "2.5" },
      { value: "3", labelKey: "3" },
      { value: "3.5", labelKey: "3.5" },
      { value: "4", labelKey: "4" },
    ],
  },
  {
    name: "railSystemSlope",
    type: "yes-no",
    labelKey: "Form.WallProfileHeight.railSystemQuestion",
    tooltipKey: "Form.WallProfileHeight.railSystemQuestionTooltip",
    images: [
      {
        src: MeasuringHeightRecessed,
        alt: "Pages.MeasuringTool.MeasuringHeightRecessedAlt",
        captionKey: "Form.WallProfileHeight.MeasuringHeightRecessedCaption",
      },
    ],
    disabledOnStep: 2,
  },
  {
    name: "slope",
    type: "number-input",
    labelKey: "Form.Common.slope",
    placeholderKey: "Form.Common.slopePlaceholder",
    tooltipKey: "Form.Common.slopeTooltip",
    images: [
      {
        src: MeasuringSlope,
        alt: "Pages.MeasuringTool.MeasuringSlopeAlt",
        captionKey: "Form.Common.MeasuringSlopeCaption",
      },
    ],
    unitKey: "Form.Common.measurementUnitMm",
    min: 0,
    disabledOnStep: 3,
  },
  {
    name: "wallProfileHeight",
    type: "number-input",
    labelKey: "Form.WallProfileHeight.label",
    placeholderKey: "Form.WallProfileHeight.placeholder",
    tooltipKey: "Form.WallProfileHeight.tooltip",
    images: [
      {
        src: MeasuringHeightPaving,
        alt: "Pages.MeasuringTool.MeasuringHeightPavingAlt",
        captionKey: "Form.WallProfileHeight.MeasuringHeightPavingCaption",
      },
    ],
    unitKey: "Form.Common.measurementUnitMm",
    min: 0,
    disabledOnStep: 3,
  },
];

export const gutterHeightSteps: FormStepConfig[] = [
  { ...wallProfileSteps[0] },
  { ...wallProfileSteps[1] },
  { ...wallProfileSteps[2] },
  {
    name: "heightBottomGutter",
    type: "custom-select",
    labelKey: "Form.HeightBottomGutter.label",
    placeholderKey: "Form.HeightBottomGutter.placeholder",
    tooltipKey: "Form.HeightBottomGutter.tooltip",
    images: [
      {
        src: MeasuringHeightPaving,
        alt: "Pages.MeasuringTool.MeasuringHeightPavingAlt",
        captionKey: "Form.HeightBottomGutter.MeasuringHeightPavingCaption",
      },
    ],
    unitKey: "Form.Common.measurementUnitMm",
    min: 0,
    disabledOnStep: 3,
  },
];
</file>

<file path="src/components/measuring-tool/ImageSwitcher.tsx">
"use client";
import React from "react";
import Image, { StaticImageData } from "next/image";
import { motion, AnimatePresence } from "framer-motion";

interface ImageSwitcherProps {
  src: StaticImageData | string;
  alt: string;
  selectedTab: "height-lower-gutter" | "wall-profile-height";
}

export const ImageSwitcher: React.FC<ImageSwitcherProps> = ({
  src,
  alt,
  selectedTab,
}) => {
  return (
    <div className="relative aspect-16/9">
      <AnimatePresence initial={false}>
        <motion.div
          key={selectedTab}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.4, ease: "easeInOut" }}
          className="absolute inset-0"
        >
          <Image
            src={src}
            alt={alt}
            fill
            className="rounded-t-lg object-cover lg:rounded-lg"
            sizes={`(min-width: 1536px) calc((1536px - 48px - 32px * 11) * (7 / 12) + 32px * 6), (min-width: 1280px) calc((1280px - 48px - 32px * 11) * (7 / 12) + 32px * 6), (min-width: 1024px) calc((1024px - 48px - 32px * 11) * (7 / 12) + 32px * 6), (min-width: 768px) calc(768px - 48px), (min-width: 640px) calc(640px - 48px), calc(100vw - 32px)`}
            placeholder="blur"
            priority
            fetchPriority="high"
          />
        </motion.div>
      </AnimatePresence>
    </div>
  );
};
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="next.config.js">
import createNextIntlPlugin from "next-intl/plugin";

const withNextIntl = createNextIntlPlugin();

// Your base Next.js config
/** @type {import('next').NextConfig} */
const nextConfig = {
  images: {
    formats: ["image/webp", "image/avif"],
  },
  webpack(config) {
    // Grab the existing rule that handles SVG imports
    const fileLoaderRule = config.module.rules.find((rule) =>
      rule.test?.test?.(".svg"),
    );

    config.module.rules.push(
      // Reapply the existing rule, but only for svg imports ending in ?url
      {
        ...fileLoaderRule,
        test: /\.svg$/i,
        resourceQuery: /url/, // *.svg?url
      },
      // Convert all other *.svg imports to React components
      {
        test: /\.svg$/i,
        issuer: fileLoaderRule.issuer,
        resourceQuery: { not: [...fileLoaderRule.resourceQuery.not, /url/] }, // exclude if *.svg?url
        use: ["@svgr/webpack"],
      },
    );

    // Modify the file loader rule to ignore *.svg, since we have it handled now.
    fileLoaderRule.exclude = /\.svg$/i;

    return config;
  },
};

// Wrap the config with next-intl
export default withNextIntl(nextConfig);
</file>

<file path="src/components/measuring-tool/rangeMidpointUtil.ts">
// Parseert een bereik zoals "2230-2270" en retourneert het afgeronde middelpunt (bijv. 2250)
export function rangeMidpoint(val: string): number | null {
  const match = val.match(/^(\d+)-(\d+)$/);
  if (!match) return null;
  const [_, a, b] = match;
  return Math.round((parseInt(a, 10) + parseInt(b, 10)) / 2);
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "src/app/not-found.tsx"],
  "exclude": ["node_modules"]
}
</file>

<file path="eslint.config.mjs">
import { FlatCompat } from "@eslint/eslintrc";

const compat = new FlatCompat({
  // import.meta.dirname is available after Node.js v20.11.0
  baseDirectory: import.meta.dirname,
});

const eslintConfig = [
  ...compat.config({
    extends: ["next"],
    rules: {
      "react/no-unescaped-entities": "off",
      "@next/next/no-page-custom-font": "off",
    },
  }),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import { NextConfig } from "next";
import createNextIntlPlugin from "next-intl/plugin";

const nextConfig: NextConfig = {};

const withNextIntl = createNextIntlPlugin();
export default withNextIntl(nextConfig);
</file>

<file path="src/components/measuring-tool/FormStep.tsx">
import React from "react";
import { useFormContext } from "react-hook-form";
import { useTranslations } from "next-intl";
import {
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { InfoTooltipSheet } from "./InfoTooltipSheet";
import { NumberInputWithUnit } from "./NumberInputWithUnit";
import { YesNoRadioGroup } from "./YesNoRadioGroup";
import * as RadioGroupCards from "@radix-ui/react-radio-group";
import { FormStepConfig } from "./formStepsConfig";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { rangeMidpoint } from "./rangeMidpointUtil";

// Type guard om te controleren of een waarde een gedefinieerde niet-lege string is
function isDefinedString(val: unknown): val is string {
  return typeof val === "string" && val.length > 0;
}

type Props = {
  config: FormStepConfig;
  t: ReturnType<typeof useTranslations>;
  disabled?: boolean;
};

export const GUTTER_HEIGHT_RANGE_OPTIONS = [
  { value: "1980-2020", label: "1980-2020 mm" },
  { value: "2030-2070", label: "2030-2070 mm" },
  { value: "2080-2120", label: "2080-2120 mm" },
  { value: "2130-2170", label: "2130-2170 mm" },
  { value: "2180-2220", label: "2180-2220 mm" },
  { value: "2230-2270", label: "2230-2270 mm" },
  { value: "2280-2320", label: "2280-2320 mm" },
  { value: "2330-2370", label: "2330-2370 mm" },
  { value: "2380-2420", label: "2380-2420 mm" },
  { value: "2480-2520", label: "2480-2520 mm" },
];

export const FormStep: React.FC<Props> = ({ config, t, disabled }) => {
  const form = useFormContext();
  const groupLabelId = React.useId();
  if (config.type === "radio-group" && Array.isArray(config.options)) {
    const options = config.options; // TypeScript verzekert ons dat dit een array is door de type guard

    return (
      <FormField
        control={form.control}
        name={config.name}
        render={({ field }) => (
          <FormItem>
            <fieldset disabled={disabled} className="trans-all space-y-2">
              <FormLabel asChild id={groupLabelId}>
                <legend
                  className="flex items-center gap-x-1 has-disabled:opacity-50"
                  data-required
                >
                  <span>{t(config.labelKey)}</span>
                  {isDefinedString(config.tooltipKey) && (
                    <InfoTooltipSheet
                      t={t}
                      titleKey={config.labelKey}
                      descriptionKey={config.tooltipKey}
                      images={config.images}
                      disabled={disabled}
                    />
                  )}
                </legend>
              </FormLabel>
              <FormControl>
                <RadioGroupCards.Root
                  name={field.name}
                  className="flex flex-wrap gap-2"
                  onValueChange={field.onChange}
                  value={field.value?.toString() ?? ""}
                  aria-describedby={`${field.name}-error`}
                  aria-labelledby={groupLabelId}
                >
                  {options.map((option) => (
                    <RadioGroupCards.Item
                      key={option.value}
                      value={option.value}
                      className="focus-visible:ring-ring/50 data-[state=checked]:text-primary text-muted-foreground data-[state=checked]:border-primary focus-visible:border-ring hover:bg-muted/30 data-[state=checked]:bg-muted/30 border-input min-h-12 rounded border px-4 py-2.75 outline-none focus-visible:ring-2 data-[state=checked]:font-semibold"
                    >
                      <span>
                        {option.labelKey.match(/^\d/)
                          ? `${option.value} ${t("Form.Common.measurementUnitMeter")}`
                          : t(option.labelKey)}
                      </span>
                    </RadioGroupCards.Item>
                  ))}
                </RadioGroupCards.Root>
              </FormControl>
              <FormMessage id={`${field.name}-error`} />
            </fieldset>
          </FormItem>
        )}
      />
    );
  }

  if (config.type === "yes-no") {
    return (
      <FormField
        control={form.control}
        name={config.name}
        render={({ field }) => {
          const valueAsBoolean = field.value === "checked";
          const handleValueChange = (isSelected: boolean) => {
            field.onChange(isSelected ? "checked" : "unchecked");
          };
          return (
            <FormItem>
              <fieldset disabled={disabled} className="trans-all space-y-2">
                <FormLabel asChild id={groupLabelId}>
                  <legend
                    className="flex items-center gap-x-1 has-disabled:opacity-50"
                    data-required
                  >
                    <span>{t(config.labelKey)}</span>
                    {isDefinedString(config.tooltipKey) ? (
                      <InfoTooltipSheet
                        t={t}
                        titleKey={config.labelKey}
                        descriptionKey={config.tooltipKey}
                        images={config.images}
                        disabled={disabled}
                      />
                    ) : null}
                  </legend>
                </FormLabel>
                <FormControl>
                  <YesNoRadioGroup
                    id={field.name}
                    name={field.name}
                    value={field.value ? valueAsBoolean : undefined}
                    onChange={handleValueChange}
                    yesLabel={t("Form.Common.yes")}
                    noLabel={t("Form.Common.no")}
                    aria-describedby={`${field.name}-error`}
                    aria-labelledby={groupLabelId}
                  />
                </FormControl>
                <FormMessage id={`${field.name}-error`} />
              </fieldset>
            </FormItem>
          );
        }}
      />
    );
  }

  if (config.type === "number-input") {
    return (
      <FormField
        control={form.control}
        name={config.name}
        render={({ field, fieldState }) => (
          <FormItem>
            <FormLabel
              htmlFor={field.name}
              className="flex items-center gap-x-1 has-disabled:opacity-50"
              data-required
            >
              <span>{t(config.labelKey)}</span>
              {isDefinedString(config.tooltipKey) && (
                <InfoTooltipSheet
                  t={t}
                  titleKey={config.labelKey}
                  descriptionKey={config.tooltipKey}
                  images={config.images}
                  disabled={disabled}
                />
              )}
            </FormLabel>
            <FormControl>
              <NumberInputWithUnit
                t={t}
                id={field.name}
                value={field.value}
                onChange={field.onChange}
                placeholder={
                  config.placeholderKey ? t(config.placeholderKey) : ""
                }
                unit={config.unitKey ? t(config.unitKey) : ""}
                aria-describedby={`${field.name}-error`}
                min={config.min}
                max={config.max}
                isInvalid={fieldState.invalid}
                aria-labelledby={groupLabelId}
                disabled={disabled}
              />
            </FormControl>
            <FormMessage id={`${field.name}-error`} />
          </FormItem>
        )}
      />
    );
  }

  if (config.type === "custom-select") {
    return (
      <FormField
        control={form.control}
        name={config.name}
        render={({ field }) => {
          // Bepaal de geselecteerde waarde voor de Select component (voor gecontroleerde select)
          let selectedRange = "";
          if (typeof field.value === "string") {
            selectedRange = field.value;
          } else if (typeof field.value === "number") {
            // Zoek het bereik dat overeenkomt met de numerieke waarde
            selectedRange =
              GUTTER_HEIGHT_RANGE_OPTIONS.find(
                (opt) => rangeMidpoint(opt.value) === field.value,
              )?.value ?? "";
          }
          return (
            <FormItem>
              <FormLabel
                htmlFor={field.name}
                className="flex items-center gap-x-1 has-disabled:opacity-50"
                data-required
              >
                <span>{t(config.labelKey)}</span>
                {isDefinedString(config.tooltipKey) && (
                  <InfoTooltipSheet
                    t={t}
                    titleKey={config.labelKey}
                    descriptionKey={config.tooltipKey}
                    images={config.images}
                    disabled={disabled}
                  />
                )}
              </FormLabel>
              <FormControl>
                <Select
                  value={selectedRange}
                  onValueChange={(val) => {
                    // Zet de bereik-string altijd om naar het juiste middelpunt.
                    field.onChange(rangeMidpoint(val));
                  }}
                  disabled={disabled}
                  name={field.name}
                >
                  <SelectTrigger
                    className="w-full"
                    id={field.name}
                    aria-labelledby={`${field.name}-label ${field.name}-value`}
                  >
                    <SelectValue
                      placeholder={
                        config.placeholderKey ? t(config.placeholderKey) : ""
                      }
                      id={`${field.name}-value`}
                    />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectGroup>
                      {GUTTER_HEIGHT_RANGE_OPTIONS.map((option) => (
                        <SelectItem key={option.value} value={option.value}>
                          {option.label}
                        </SelectItem>
                      ))}
                    </SelectGroup>
                  </SelectContent>
                </Select>
              </FormControl>
            </FormItem>
          );
        }}
      />
    );
  }

  return null;
};
</file>

<file path="src/lib/storeUtils.ts">
import { type StoreData } from "@/data/stores";

// Scheidt een lijst van landen in een 'voorkeursland' en 'overige landen'
// op basis van de landcode van de gebruiker.
export function getStoreLocalization(
  userCountryCode: string,
  allStores: StoreData[],
) {
  // Vind het land die overeenkomt met de landcode van de gebruiker.
  const preferredStore = allStores.find(
    (store) => store.countryCode === userCountryCode,
  );

  // Filter de lijst om alle andere landen te krijgen.
  const otherStores = allStores.filter(
    (store) => store.countryCode !== userCountryCode,
  );

  return { preferredStore, otherStores };
}
</file>

<file path="src/components/measuring-tool/PassageHeightResultView.tsx">
import React from "react";
import { useTranslations } from "next-intl";

// Props voor de PassageHeightResultView component.
interface PassageHeightResultViewProps {
  // Vertalingsfunctie van next-intl.
  t: ReturnType<typeof useTranslations>;
  // De berekende doorloophoogte.
  calculatedOutput: number;
  // Het acceptabele bereik voor de output, of null.
  outputRange: [number, number] | null;
}

// Toont het resultaat van de doorloophoogteberekening.
// Deze component geeft de berekende hoogte weer en, indien beschikbaar,
// een succesbericht dat aangeeft binnen welk bereik de waarde valt.
export const PassageHeightResultView: React.FC<
  PassageHeightResultViewProps
> = ({ t, outputRange }) => (
  <>
    {outputRange && (
      <span>
        {t.rich("Form.Common.rangeSuccess", {
          min: outputRange[0],
          max: outputRange[1],
          strong: (chunks) => <strong>{chunks}</strong>,
        })}
      </span>
    )}
  </>
);
</file>

<file path="src/components/ui/video.tsx">
"use client";

import { useState } from "react";
import Image, { StaticImageData } from "next/image";
import PlayCircleFill from "/public/icons/MingCute/play_circle_fill.svg";
import { useLocale, useTranslations } from "next-intl";

interface VideoProps {
  // Een object met video-URL's per taal, plus een fallback.
  videoUrls: { [locale: string]: string; fallback: string };
  // De afbeelding die als overlay/thumbnail wordt getoond.
  overlayImage: string | StaticImageData;
  // De titel van de video, gebruikt in de `iframe` en `aria-label`.
  title: string;
  // De alt-tekst voor de overlay-afbeelding.
  alt: string;
  priority?: boolean;
  fetchPriority?: "low" | "auto" | "high";
  className?: string;
  sizes?: string;
  placeholder?: "blur" | "empty" | `data:image/${string}`;
}

// Een performance-vriendelijke video-component.
// Rendert een `iframe` pas nadat de gebruiker op de afspeelknop klikt.
export default function Video({
  videoUrls,
  overlayImage,
  title,
  alt,
  priority = false,
  fetchPriority = "auto",
  sizes = "(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw",
  placeholder = "blur",
  className,
}: VideoProps) {
  const [isPlaying, setIsPlaying] = useState(false);
  const locale = useLocale();
  const t = useTranslations("Video");

  // Selecteert de juiste video-URL op basis van de taal, met een fallback.
  const selectedVideoUrl = videoUrls[locale] || videoUrls.fallback;

  // Voegt de autoplay parameter toe aan de URL om de video direct te starten.
  function addAutoplayParam(url: string) {
    if (url.includes("autoplay=1")) return url;
    const separator = url.includes("?") ? "&" : "?";
    return `${url}${separator}autoplay=1`;
  }

  // Als de video speelt, render de iframe.
  if (isPlaying) {
    return (
      <div
        className={`relative aspect-16/9 w-full overflow-hidden ${className}`}
      >
        <iframe
          className="size-full"
          src={addAutoplayParam(selectedVideoUrl)}
          title={title}
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          loading="lazy"
          allowFullScreen
        />
      </div>
    );
  }

  // Anders, toon de thumbnail met afspeelknop.
  return (
    <div
      className={`relative aspect-16/9 w-full cursor-pointer overflow-hidden ${className}`}
    >
      <button
        onClick={() => setIsPlaying(true)}
        aria-label={t("playVideoAriaLabel", { title })}
        className="group absolute inset-0 z-20 flex size-full items-center justify-center"
        type="button"
      >
        <Image
          src={overlayImage}
          alt={alt}
          priority={priority}
          fetchPriority={fetchPriority}
          sizes={sizes}
          placeholder={placeholder}
          fill
          className="object-cover"
        />
        <div className="relative z-10 flex size-full items-center justify-center">
          <PlayCircleFill
            className="size-16 rounded-full text-white transition-transform duration-300 group-hover:scale-110 group-focus-visible:scale-110 group-focus-visible:ring-2 group-focus-visible:ring-white/50 group-focus-visible:outline-none sm:size-24"
            aria-hidden="true"
          />
        </div>
      </button>
    </div>
  );
}
</file>

<file path="src/data/stores.ts">
// Definieert de datastructuur voor een enkele store.
export type StoreData = {
  // De unieke code voor het land en de taal (bijv. "BE-NL", "DE").
  countryCode: string;
  // De naam van het land.
  country: string;
  // De taal die in het land wordt gesproken.
  language: string;
  // De volledige URL naar de webshop.
  storeUrl: string;
};

// Een array met de data van alle beschikbare stores.
export const STORES_DATA: StoreData[] = [
  {
    countryCode: "BE-NL",
    country: "België",
    language: "Nederlands",
    storeUrl: "https://www.tuinmaximaal.be/",
  },
  {
    countryCode: "BE-FR",
    country: "Belgique",
    language: "Français",
    storeUrl: "https://www.tuinmaximaal.be/fr/",
  },
  {
    countryCode: "DE",
    country: "Deutschland",
    language: "Deutsch",
    storeUrl: "https://www.tuinmaximaal.de/",
  },
  {
    countryCode: "FR",
    country: "France",
    language: "Français",
    storeUrl: "https://www.tuinmaximaal.fr/",
  },
  {
    countryCode: "NL",
    country: "Nederland",
    language: "Nederlands",
    storeUrl: "https://www.tuinmaximaal.nl/",
  },
  {
    countryCode: "EN",
    country: "United Kingdom",
    language: "English",
    storeUrl: "https://www.tuinmaximaal.co.uk/",
  },
];
</file>

<file path="src/components/measuring-tool/InfoTooltipSheet.tsx">
import React from "react";
import { useTranslations } from "next-intl";
import Image, { StaticImageData } from "next/image";
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet";
import InformationLine from "../../../public/icons/MingCute/information_line.svg";

// Definieert de structuur voor afbeeldingen die in de tooltip worden weergegeven.
interface InfoImage {
  src: string | StaticImageData;
  alt: string;
  captionKey?: string;
  captionValues?: Record<string, any>;
}

// Props voor de InfoTooltipSheet component.
interface InfoTooltipSheetProps {
  // De key voor de titelvertaling.
  titleKey: string;
  // De key voor de beschrijvingvertaling.
  descriptionKey: string;
  // Optionele waarden voor de beschrijvingvertaling.
  descriptionValues?: Record<string, any>;
  // Optionele key voor de triggertekst.
  triggerTextKey?: string;
  // Vertalingsfunctie van next-intl.
  t: ReturnType<typeof useTranslations>;
  // Een optionele lijst van afbeeldingen om weer te geven.
  images?: InfoImage[];
  disabled?: boolean;
}

// Een herbruikbare component die een informatie-icoon toont.
// Bij het aanklikken wordt een "sheet" (zijpaneel) geopend met een titel,
// beschrijving en optionele afbeeldingen.
export const InfoTooltipSheet: React.FC<InfoTooltipSheetProps> = ({
  titleKey,
  descriptionKey,
  descriptionValues,
  triggerTextKey,
  t,
  images = [],
  disabled,
}) => {
  return (
    <Sheet>
      <SheetTrigger
        className="focus-visible:ring-ring/50 rounded outline-none focus-visible:ring-2"
        aria-label={t(triggerTextKey || "Form.Common.moreInformation")}
        disabled={disabled}
      >
        <InformationLine aria-hidden="true" />
      </SheetTrigger>
      <SheetContent>
        <SheetHeader>
          <SheetTitle>{t(titleKey)}</SheetTitle>
          <SheetDescription className="mb-4">
            {t(descriptionKey, descriptionValues)}
          </SheetDescription>
          {images.length > 0 &&
            images.map((img, idx) => (
              <figure key={idx} className="mb-4">
                <Image
                  src={img.src}
                  alt={img.alt}
                  sizes="(min-width: 640px) calc(448px - 48px), calc(100vw - 48px)"
                  placeholder="blur"
                  className="rounded-lg"
                />
                {img.captionKey && (
                  <figcaption className="text-muted-foreground mt-2 text-center text-sm">
                    {t(img.captionKey, img.captionValues)}
                  </figcaption>
                )}
              </figure>
            ))}
        </SheetHeader>
      </SheetContent>
    </Sheet>
  );
};
</file>

<file path="src/components/ui/form.tsx">
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import {
  Controller,
  FormProvider,
  useFormContext,
  useFormState,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue,
);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState } = useFormContext();
  const formState = useFormState({ name: fieldContext.name });
  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue,
);

function FormItem({ className, ...props }: React.ComponentProps<"div">) {
  const id = React.useId();

  return (
    <FormItemContext.Provider value={{ id }}>
      <div
        data-slot="form-item"
        className={cn("space-y-2", className)}
        {...props}
      />
    </FormItemContext.Provider>
  );
}

function FormLabel({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  const { error, formItemId } = useFormField();

  return (
    <Label
      data-slot="form-label"
      data-error={!!error}
      className={cn(className)}
      htmlFor={formItemId}
      {...props}
    />
  );
}

function FormControl({ ...props }: React.ComponentProps<typeof Slot>) {
  const { error, formItemId, formDescriptionId, formMessageId } =
    useFormField();

  return (
    <Slot
      data-slot="form-control"
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  );
}

function FormDescription({ className, ...props }: React.ComponentProps<"p">) {
  const { formDescriptionId } = useFormField();

  return (
    <p
      data-slot="form-description"
      id={formDescriptionId}
      className={cn("text-sm", className)}
      {...props}
    />
  );
}

function FormMessage({ className, ...props }: React.ComponentProps<"p">) {
  const { error, formMessageId } = useFormField();
  const body = error ? String(error?.message ?? "") : props.children;

  if (!body) {
    return null;
  }

  return (
    <p
      data-slot="form-message"
      id={formMessageId}
      className={cn("text-destructive text-sm", className)}
      {...props}
    >
      {body}
    </p>
  );
}

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
};
</file>

<file path="src/components/ui/label.tsx">
"use client";

import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";

import { cn } from "@/lib/utils";

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm font-semibold select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50 peer-data-[state=checked]:font-semibold",
        className,
      )}
      {...props}
    />
  );
}

export { Label };
</file>

<file path="src/components/ui/select.tsx">
"use client";

import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import CheckLine from "../../../public/icons/MingCute/check_line.svg";
import DownLine from "../../../public/icons/MingCute/down_line.svg";
import UpLine from "../../../public/icons/MingCute/up_line.svg";

import { cn } from "@/lib/utils";

function Select({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Root>) {
  return <SelectPrimitive.Root data-slot="select" {...props} />;
}

function SelectGroup({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Group>) {
  return <SelectPrimitive.Group data-slot="select-group" {...props} />;
}

function SelectValue({
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Value>) {
  return <SelectPrimitive.Value data-slot="select-value" {...props} />;
}

function SelectTrigger({
  className,
  size = "default",
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Trigger> & {
  size?: "sm" | "default";
}) {
  return (
    <SelectPrimitive.Trigger
      data-slot="select-trigger"
      data-size={size}
      className={cn(
        "border-input data-[placeholder]:text-muted-foreground focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 aria-invalid:border-destructive flex w-fit items-center justify-between gap-2 rounded border bg-transparent px-4 py-2 whitespace-nowrap transition-[color] outline-none focus-visible:ring-2 disabled:cursor-not-allowed disabled:opacity-50 data-[size=default]:h-12 data-[size=sm]:h-11 *:data-[slot=select-value]:line-clamp-1 *:data-[slot=select-value]:flex *:data-[slot=select-value]:items-center *:data-[slot=select-value]:gap-2 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-5",
        className,
      )}
      {...props}
    >
      {children}
      <SelectPrimitive.Icon asChild>
        <DownLine className="text-primary size-5" aria-hidden="true" />
      </SelectPrimitive.Icon>
    </SelectPrimitive.Trigger>
  );
}

function SelectContent({
  className,
  children,
  position = "popper",
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Content>) {
  return (
    <SelectPrimitive.Portal>
      <SelectPrimitive.Content
        data-slot="select-content"
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 relative z-50 max-h-(--radix-select-content-available-height) min-w-3xs origin-(--radix-select-content-transform-origin) overflow-x-hidden overflow-y-auto rounded border shadow-md",
          position === "popper" &&
            "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className,
        )}
        position={position}
        {...props}
      >
        <SelectScrollUpButton />
        <SelectPrimitive.Viewport
          className={cn(
            "p-1",
            position === "popper" &&
              "h-[var(--radix-select-trigger-height)] w-full scroll-my-1",
          )}
        >
          {children}
        </SelectPrimitive.Viewport>
        <SelectScrollDownButton />
      </SelectPrimitive.Content>
    </SelectPrimitive.Portal>
  );
}

function SelectLabel({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Label>) {
  return (
    <SelectPrimitive.Label
      data-slot="select-label"
      className={cn("text-muted-foreground px-2 py-1.5 text-xs", className)}
      {...props}
    />
  );
}

function SelectItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Item>) {
  return (
    <SelectPrimitive.Item
      data-slot="select-item"
      className={cn(
        "focus:bg-secondary focus:text-secondary-foreground [&_svg:not([class*='text-'])]:text-secondary relative flex h-11 w-full cursor-default items-center gap-2 rounded py-1.5 pr-8 pl-4 outline-hidden select-none last:mr-3 data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-5 focus:[&_svg:not([class*='text-'])]:text-white *:[span]:last:flex *:[span]:last:items-center *:[span]:last:gap-2",
        className,
      )}
      {...props}
    >
      <span className="absolute right-4 flex size-5 items-center justify-center">
        <SelectPrimitive.ItemIndicator>
          <CheckLine className="size-5" aria-hidden="true" />
        </SelectPrimitive.ItemIndicator>
      </span>
      <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
    </SelectPrimitive.Item>
  );
}

function SelectSeparator({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.Separator>) {
  return (
    <SelectPrimitive.Separator
      data-slot="select-separator"
      className={cn("bg-border pointer-events-none -mx-1 my-1 h-px", className)}
      {...props}
    />
  );
}

function SelectScrollUpButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollUpButton>) {
  return (
    <SelectPrimitive.ScrollUpButton
      data-slot="select-scroll-up-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <UpLine className="size-4" aria-hidden="true" />
    </SelectPrimitive.ScrollUpButton>
  );
}

function SelectScrollDownButton({
  className,
  ...props
}: React.ComponentProps<typeof SelectPrimitive.ScrollDownButton>) {
  return (
    <SelectPrimitive.ScrollDownButton
      data-slot="select-scroll-down-button"
      className={cn(
        "flex cursor-default items-center justify-center py-1",
        className,
      )}
      {...props}
    >
      <DownLine className="size-4" aria-hidden="true" />
    </SelectPrimitive.ScrollDownButton>
  );
}

export {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectScrollDownButton,
  SelectScrollUpButton,
  SelectSeparator,
  SelectTrigger,
  SelectValue,
};
</file>

<file path="src/i18n/request.ts">
import { getRequestConfig } from "next-intl/server";
import { headers } from "next/headers";
import Negotiator from "negotiator";
import { match } from "@formatjs/intl-localematcher";

export default getRequestConfig(async () => {
  // Haal de 'accept-language' header van het inkomende verzoek op.
  const acceptLanguageHeader = (await headers()).get("accept-language") ?? "";

  // Definieer de ondersteunde talen en de standaardtaal.
  const supportedLocales = ["en", "nl", "de", "fr"];
  const defaultLocale = "en";

  // Gebruik Negotiator om de door de browser gevraagde talen te parsen.
  const languages = new Negotiator({
    headers: { "accept-language": acceptLanguageHeader },
  }).languages();

  // Gebruik @formatjs/intl-localematcher om de beste overeenkomst te vinden
  // tussen de gevraagde talen en de ondersteunde talen.
  const locale = match(languages, supportedLocales, defaultLocale);

  return {
    locale,
    // Laad dynamisch het JSON-bestand met vertalingen voor de geselecteerde taal.
    messages: (await import(`../../messages/${locale}.json`)).default,
  };
});
</file>

<file path="src/components/measuring-tool/CalculationResultAlert.tsx">
import React from "react";
import { useTranslations } from "next-intl";
import { Alert, AlertTitle, AlertDescription } from "@/components/ui/alert";
import { GutterHeightResultView } from "./GutterHeightResultView";
import { PassageHeightResultView } from "./PassageHeightResultView";
import CheckCircleLine from "../../../public/icons/MingCute/check_circle_line.svg";
import InformationLine from "../../../public/icons/MingCute/information_line.svg";

// Het type berekening dat door het formulier wordt uitgevoerd.
type CalculatorFormType = "wallProfile" | "gutterHeight";

// Props voor de CalculationResultAlert component.
interface CalculationResultAlertProps {
  t: ReturnType<typeof useTranslations>;
  formType: CalculatorFormType;
  calculatedOutput: number;
  outputRange: [number, number] | null;
  topWallProfileHeight?: number | null;
}

export const CalculationResultAlert: React.FC<CalculationResultAlertProps> = ({
  t,
  formType,
  calculatedOutput,
  outputRange,
  topWallProfileHeight,
}) => {
  const isGutterHeightResult =
    formType === "gutterHeight" && topWallProfileHeight != null && outputRange;

  if (isGutterHeightResult) {
    return (
      <Alert variant="info" role="status" aria-live="polite">
        <InformationLine aria-hidden="true" />
        <AlertTitle>
          {t("Form.HeightBottomGutter.wallProfileHeightsResultTitle")}
        </AlertTitle>
        <AlertDescription>
          <GutterHeightResultView
            t={t}
            calculatedOutput={calculatedOutput}
            topWallProfileHeight={topWallProfileHeight}
          />
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <Alert variant="success" role="status" aria-live="polite">
      <CheckCircleLine aria-hidden="true" />
      <AlertTitle>
        {t.rich("Form.Common.passageHeightResult", {
          result: calculatedOutput,
          strong: (chunks) => <strong className="font-bold">{chunks}</strong>,
        })}
      </AlertTitle>
      <AlertDescription>
        <PassageHeightResultView
          t={t}
          calculatedOutput={calculatedOutput}
          outputRange={outputRange}
        />
      </AlertDescription>
    </Alert>
  );
};
</file>

<file path="src/components/measuring-tool/GutterHeightResultView.tsx">
import React from "react";
import { useTranslations } from "next-intl";

// Props voor de GutterHeightResultView component.
interface GutterHeightResultViewProps {
  // Vertalingsfunctie van next-intl.
  t: ReturnType<typeof useTranslations>;
  // De berekende hoogte van het onderste gootprofiel.
  calculatedOutput: number;
  // De hoogte van het bovenste muurprofiel.
  topWallProfileHeight: number;
}

// Een component die de resultaten van de goothoogteberekening weergeeft.
// Het toont de berekende hoogtes voor zowel het onderste als het bovenste muurprofiel,
// en het resulterende bereik van de doorloophoogte.
export const GutterHeightResultView: React.FC<GutterHeightResultViewProps> = ({
  t,
  calculatedOutput,
  topWallProfileHeight,
}) => (
  <>
    <ul className="list-(--dash) space-x-12 pl-3" role="list">
      <li className="pl-2">
        {t.rich("Form.HeightBottomGutter.bottomWallProfileHeightLabel", {
          height: calculatedOutput,
          strong: (chunks) => <strong>{chunks}</strong>,
        })}
      </li>
      <li className="pl-2">
        {t.rich("Form.HeightBottomGutter.topWallProfileHeightLabel", {
          height: topWallProfileHeight,
          strong: (chunks) => <strong>{chunks}</strong>,
        })}
      </li>
    </ul>
  </>
);
</file>

<file path="src/components/measuring-tool/PassageHeightCalculatorForm.tsx">
"use client";
import React, { useState, useEffect, useMemo } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Form } from "@/components/ui/form";
import { CalculationResultAlert } from "./CalculationResultAlert";
import {
  usePassageHeightCalculator,
  FormValues,
} from "@/hooks/usePassageHeightCalculator";
import { wallProfileSteps, gutterHeightSteps } from "./formStepsConfig";
import { FormStep } from "./FormStep";

// Het type berekening: muurprofiel of goothoogte.
type FormType = "wallProfile" | "gutterHeight";

// Props voor het formulier.
interface FormProps {
  formType: FormType;
  mainInputLabelKey: string;
  mainInputPlaceholderKey: string;
  mainInputTooltipKey: string;
  submitButtonTextKey: string;
}

// De structuur van het berekeningsresultaat.
interface Result {
  output: number | null;
  topWallProfileHeight?: number | null;
  range: [number, number] | null;
}

// Orchestreert een meerstapsformulier voor het berekenen van de doorloophoogte of goothoogte.
// Deze component beheert de staat van het formulier, de stappen en de weergave van het resultaat.
export function PassageHeightCalculatorForm({
  formType,
  submitButtonTextKey,
}: FormProps) {
  const [currentStep, setCurrentStep] = useState(1);
  const [result, setResult] = useState<Result>({
    output: null,
    topWallProfileHeight: null,
    range: null,
  });

  // Hook voor de berekeningslogica, schema en configuratie.
  const { t, schema, calculateResult } = usePassageHeightCalculator(formType);

  const steps =
    formType === "wallProfile" ? wallProfileSteps : gutterHeightSteps;

  const form = useForm<FormValues>({
    resolver: zodResolver(schema),
    mode: "onChange",
  });

  const {
    trigger,
    watch,
    getValues,
    formState,
    handleSubmit: handleHookSubmit,
  } = form;
  const watchedDepth = watch("depth");
  const watchedRailSlope = watch("railSystemSlope");
  const watchedSlope = watch("slope");

  // Effect om automatisch naar de volgende stap te gaan.
  useEffect(() => {
    if (watchedRailSlope !== undefined) setCurrentStep(3);
    else if (watchedDepth) setCurrentStep(2);
  }, [watchedDepth, watchedRailSlope]);

  // Effect om validatie opnieuw te triggeren wanneer afhankelijke velden veranderen.
  useEffect(() => {
    type FieldName =
      | "depth"
      | "railSystemSlope"
      | "slope"
      | "wallProfileHeight"
      | "heightBottomGutter";
    const mainField = steps[steps.length - 1].name as FieldName;
    if (getValues(mainField) != null) {
      trigger(mainField);
    }
  }, [watchedDepth, watchedRailSlope, watchedSlope, trigger, getValues, steps]);

  // Effect om het vorige resultaat te wissen wanneer het formulier wordt gewijzigd.
  useEffect(() => {
    if (formState.isDirty && result.output !== null) {
      setResult({ output: null, topWallProfileHeight: null, range: null });
    }
  }, [formState.isDirty, result.output]);

  // Verwerkt de formulierinzending, berekent het resultaat en reset het formulier.
  const onSubmit = (values: FormValues) => {
    const newResult = calculateResult(values);
    setResult(newResult);
    form.reset({ ...values });
  };

  return (
    <Form {...form}>
      <form onSubmit={handleHookSubmit(onSubmit)} className="space-y-6">
        {steps.map((step, i) => (
          <FormStep
            key={step.name}
            config={step}
            t={t}
            disabled={
              step.disabledOnStep ? currentStep < step.disabledOnStep : false
            }
          />
        ))}
        <Button
          type="submit"
          className="w-full"
          disabled={currentStep < 3 || !formState.isValid}
        >
          {t(submitButtonTextKey)}
        </Button>

        {result.output !== null && (
          <CalculationResultAlert
            t={t}
            formType={formType}
            calculatedOutput={result.output}
            outputRange={result.range}
            topWallProfileHeight={result.topWallProfileHeight}
          />
        )}
      </form>
    </Form>
  );
}
</file>

<file path="src/hooks/usePassageHeightCalculator.ts">
import { useMemo } from "react";
import { useTranslations } from "next-intl";
import { z } from "zod";

// Configuratieconstanten voor de berekeningen.
const config = {
  depths: [2.5, 3, 3.5, 4] as const,
  angle: (8 * Math.PI) / 180, // Hoek van 8 graden, eenmalig omgerekend naar radialen.
  adjustments: {
    depthPrimary: 4.59,
    depthSecondary: 7,
    wallToGutter: 1,
    railSlope: 18, // Aanpassing voor verzonken railsysteem.
  },
  limits: {
    maxPassageHeight: 2500, // Maximale toegestane doorloophoogte.
  },
  // Geldige bereiken voor de output.
  ranges: [
    [1980, 2020],
    [2030, 2070],
    [2080, 2120],
    [2130, 2170],
    [2180, 2220],
    [2230, 2270],
    [2280, 2320],
    [2330, 2370],
    [2380, 2420],
    [2480, 2520],
    [2580, 2620],
    [2680, 2720],
  ] as [number, number][],
} as const;

// Type definities
type FormType = "wallProfile" | "gutterHeight";
type RailSlope = "checked" | "unchecked";
export type FormValues = z.infer<ReturnType<typeof createSchema>>;

// Types voor gevalideerde data om non-null assertions te vermijden.
type ValidatedWallProfileForm = FormValues & {
  wallProfileHeight: number;
  depth: number;
  railSystemSlope: RailSlope;
};
type ValidatedGutterHeightForm = FormValues & {
  heightBottomGutter: number;
  depth: number;
  railSystemSlope: RailSlope;
};

// Een object dat alle rekenkundige logica groepeert.
const calculator = {
  // Berekent cruciale afmetingen op basis van diepte en afloop.
  calculateDimensions(depth: number, slope: number) {
    const cosAngle = Math.cos(config.angle);
    const sinAngle = Math.sin(config.angle);
    const insideDepth =
      depth * cosAngle * 1000 +
      config.adjustments.depthPrimary +
      config.adjustments.depthSecondary;
    const wallToGutterDiff =
      depth * sinAngle * 1000 + config.adjustments.wallToGutter;
    const slopeRatio = insideDepth > 0 ? slope / insideDepth : 0;
    const slopeDrop =
      insideDepth * Math.sin(Math.asin(Math.max(-1, Math.min(1, slopeRatio))));
    return { insideDepth, wallToGutterDiff, slopeDrop };
  },

  // Berekent de doorloophoogte op basis van de muurprofielhoogte.
  calculateFromWallProfile(
    depth: number,
    slope: number,
    wallProfile: number,
    railSlope: RailSlope,
  ) {
    const { wallToGutterDiff, slopeDrop } = this.calculateDimensions(
      depth,
      slope,
    );
    const gutterHeight = wallProfile - wallToGutterDiff + slopeDrop;
    const passageHeight =
      railSlope === "checked"
        ? gutterHeight + config.adjustments.railSlope
        : gutterHeight;
    return Math.round(passageHeight);
  },

  // Berekent de muurprofielhoogte op basis van de gewenste doorloophoogte.
  calculateFromGutterHeight(
    depth: number,
    slope: number,
    targetPassageHeight: number,
    railSlope: RailSlope,
  ) {
    const targetGutterHeight =
      railSlope === "checked"
        ? targetPassageHeight - config.adjustments.railSlope
        : targetPassageHeight;
    const { wallToGutterDiff, slopeDrop } = this.calculateDimensions(
      depth,
      slope,
    );
    const wallProfile = targetGutterHeight + wallToGutterDiff + slopeDrop;
    return Math.round(wallProfile);
  },

  // Berekent een voorgestelde muurprofielhoogte als de input buiten het bereik valt.
  calculateInverseForWallProfileSuggestion(
    depth: number,
    slope: number,
    targetPassageHeight: number,
    railSlope: RailSlope,
  ) {
    const targetGutterHeight =
      railSlope === "checked"
        ? targetPassageHeight - config.adjustments.railSlope
        : targetPassageHeight;
    const { wallToGutterDiff, slopeDrop } = this.calculateDimensions(
      depth,
      slope,
    );
    // De inverse berekening moet de hellingsdaling aftrekken.
    const wallProfile = targetGutterHeight + wallToGutterDiff - slopeDrop;
    return Math.round(wallProfile);
  },

  // Berekent een voorgestelde doorloophoogte als de input buiten het bereik valt.
  calculateInverseForGutterHeightSuggestion(
    depth: number,
    slope: number,
    targetWallProfile: number,
    railSlope: RailSlope,
  ) {
    const { wallToGutterDiff, slopeDrop } = this.calculateDimensions(
      depth,
      slope,
    );
    const targetGutterHeight = targetWallProfile - wallToGutterDiff - slopeDrop;
    const recommendedPassageHeight =
      railSlope === "checked"
        ? targetGutterHeight + config.adjustments.railSlope
        : targetGutterHeight;
    return Math.round(recommendedPassageHeight);
  },

  // Controleert of een waarde binnen de gedefinieerde bereiken valt.
  checkRange(value: number, formType: FormType) {
    for (const [min, max] of config.ranges) {
      // Alleen voor wallProfile geldt de maxPassageHeight, niet voor gutterHeight
      if (formType === "wallProfile" && value > config.limits.maxPassageHeight)
        continue;
      if (value >= min && value <= max) {
        return { inRange: true, range: [min, max] as [number, number] };
      }
    }
    // Zoek het dichtstbijzijnde bereik als de waarde buiten alle bereiken valt.
    let closest: [number, number] | null = null;
    let minDiff = Infinity;
    for (const range of config.ranges) {
      const [min, max] = range;
      if (formType === "wallProfile" && min > config.limits.maxPassageHeight)
        continue;
      const diff = Math.min(Math.abs(value - min), Math.abs(value - max));
      if (diff < minDiff) {
        minDiff = diff;
        closest = [min, max];
      }
    }
    return { inRange: false, range: closest };
  },

  // Genereert een suggestie voor een nieuwe invoerwaarde als het resultaat buiten het bereik valt.
  generateSuggestion(
    formType: FormType,
    data: FormValues,
    output: number,
    closestRange: [number, number],
  ) {
    const { depth, slope = 0, railSystemSlope } = data;
    if (depth == null || railSystemSlope == null) return null;

    let targetOutput =
      output < closestRange[0] ? closestRange[0] : closestRange[1];
    if (formType === "wallProfile") {
      targetOutput = Math.min(targetOutput, config.limits.maxPassageHeight);
    }

    const recommendedInput =
      formType === "wallProfile"
        ? this.calculateInverseForWallProfileSuggestion(
            depth,
            slope,
            targetOutput,
            railSystemSlope,
          )
        : this.calculateInverseForGutterHeightSuggestion(
            depth,
            slope,
            targetOutput,
            railSystemSlope,
          );

    return {
      recommendedInput: Math.round(recommendedInput),
      newOutputRange: closestRange,
    };
  },
};

// Een factory-functie die een Zod-validatieschema creëert op basis van het formuliertype.
const createSchema = (
  t: ReturnType<typeof useTranslations>,
  formType: FormType,
) => {
  return z
    .object({
      depth: z.coerce.number({
        invalid_type_error: t("Form.Common.validationErrors.selectOption"),
      }),
      railSystemSlope: z.enum(["checked", "unchecked"], {
        invalid_type_error: t("Form.Common.validationErrors.selectOption"),
      }),
      slope: z.coerce
        .number({
          invalid_type_error: t("Form.Common.validationErrors.enterNumber"),
        })
        .int(t("Form.Common.validationErrors.integerOnly"))
        .optional(),
      wallProfileHeight: z.coerce
        .number({
          invalid_type_error: t(
            "Form.Common.validationErrors.validNumberRequired",
          ),
        })
        .int(t("Form.Common.validationErrors.integerOnly"))
        .optional(),
      heightBottomGutter: z.coerce
        .number({
          invalid_type_error: t(
            "Form.Common.validationErrors.validNumberRequired",
          ),
        })
        .int(t("Form.Common.validationErrors.integerOnly"))
        .optional(),
    })
    .superRefine((data, ctx) => {
      const field =
        formType === "wallProfile" ? "wallProfileHeight" : "heightBottomGutter";
      const mainInputValue = data[field];

      if (mainInputValue == null) {
        ctx.addIssue({
          code: z.ZodIssueCode.custom,
          message: t("Form.Common.validationErrors.validNumberRequired"),
          path: [field],
        });
        return;
      }
      if (data.depth == null || data.railSystemSlope == null) return;

      const slope = data.slope ?? 0;
      const calculatedOutput =
        formType === "wallProfile"
          ? calculator.calculateFromWallProfile(
              data.depth,
              slope,
              mainInputValue,
              data.railSystemSlope,
            )
          : calculator.calculateFromGutterHeight(
              data.depth,
              slope,
              mainInputValue,
              data.railSystemSlope,
            );

      const { inRange, range: closestRange } = calculator.checkRange(
        calculatedOutput,
        formType,
      );

      if (!inRange && closestRange) {
        if (formType === "wallProfile") {
          const suggestion = calculator.generateSuggestion(
            formType,
            data,
            calculatedOutput,
            closestRange,
          );
          if (suggestion) {
            const fieldName = t(
              "Form.Common.validationErrors.wallProfileHeightFieldName",
            );
            ctx.addIssue({
              code: z.ZodIssueCode.custom,
              path: [field],
              message: t("Form.Common.validationErrors.suggestionMessage", {
                fieldName,
                recommendedInput: suggestion.recommendedInput,
                min: suggestion.newOutputRange[0],
                max: suggestion.newOutputRange[1],
              }),
            });
          }
        }
      }
    });
};

// Custom hook voor de doorloophoogtecalculator.
// Beheert de state, validatie en berekeningslogica.
export function usePassageHeightCalculator(formType: FormType) {
  const t = useTranslations("Components");
  const schema = useMemo(() => createSchema(t, formType), [t, formType]);

  const calculateResult = (values: FormValues) => {
    const slope = values.slope ?? 0;

    if (formType === "wallProfile") {
      const validValues = values as ValidatedWallProfileForm;
      const passageHeight = calculator.calculateFromWallProfile(
        validValues.depth,
        slope,
        validValues.wallProfileHeight,
        validValues.railSystemSlope,
      );
      const { range } = calculator.checkRange(passageHeight, "wallProfile");
      return { output: passageHeight, topWallProfileHeight: null, range };
    } else {
      const validValues = values as ValidatedGutterHeightForm;
      const wallProfile = calculator.calculateFromGutterHeight(
        validValues.depth,
        slope,
        validValues.heightBottomGutter,
        validValues.railSystemSlope,
      );
      const topWallProfileHeight = Math.round(wallProfile + 150);
      const { range } = calculator.checkRange(wallProfile, "gutterHeight");
      return { output: wallProfile, topWallProfileHeight, range };
    }
  };

  return { t, schema, config, calculateResult };
}
</file>

<file path="src/components/measuring-tool/NumberInputWithUnit.tsx">
import React from "react";
import { Input } from "@/components/ui/input";
import { useTranslations } from "next-intl";

// Props voor de NumberInputWithUnit component.
interface NumberInputWithUnitProps {
  id: string;
  placeholder: string;
  unit: string;
  t: ReturnType<typeof useTranslations>;
  min?: number;
  max?: number;
  value: number | undefined;
  onChange: (value: number | undefined) => void;
  isInvalid?: boolean;
  "aria-describedby"?: string;
  disabled?: boolean;
}

// Een inputveld voor numerieke waarden met een eenheid (bijv. "mm") die ernaast wordt weergegeven.
// Zorgt voor de conversie van de input-string naar een numerieke waarde.
export const NumberInputWithUnit: React.FC<NumberInputWithUnitProps> = ({
  id,
  placeholder,
  unit,
  t,
  min,
  max,
  value,
  onChange,
  isInvalid = false,
  disabled = false,
  "aria-describedby": ariaDescribedBy,
}) => {
  // Behandelt de wijziging van de inputwaarde.
  // Converteert de string-waarde naar een getal of `undefined` als het veld leeg is.
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    if (inputValue === "") {
      onChange(undefined);
      return;
    }

    const numValue = Number(inputValue);
    // Roep onChange alleen aan als de waarde een geldig getal is.
    if (!isNaN(numValue)) {
      onChange(numValue);
    }
  };

  const unitId = `${id}-unit`;

  return (
    <div className="relative flex items-center">
      <Input
        id={id}
        type="number"
        step={1}
        min={min}
        max={max}
        placeholder={placeholder}
        className="peer pr-10"
        aria-invalid={isInvalid}
        aria-describedby={`${unitId} ${ariaDescribedBy || ""}`.trim()}
        value={value ?? ""}
        onChange={handleChange}
        disabled={disabled}
      />
      <span
        id={unitId}
        className="text-muted-foreground pointer-events-none absolute right-3 text-sm transition-opacity peer-disabled:opacity-50"
        aria-disabled={disabled ? "true" : undefined}
      >
        {unit}
      </span>
    </div>
  );
};
</file>

<file path="src/components/ui/sheet.tsx">
"use client";

import * as React from "react";
import * as SheetPrimitive from "@radix-ui/react-dialog";
import CloseLine from "../../../public/icons/MingCute/close_line.svg";

import { cn } from "@/lib/utils";

// Custom hook om te detecteren of het apparaat mobiel is
function useIsMobile(): boolean {
  const [isMobile, setIsMobile] = React.useState(false);
  React.useEffect(() => {
    const checkIsMobile = () => {
      setIsMobile(window.innerWidth < 640);
    };

    // Zet de initiële waarde
    checkIsMobile();

    // Voeg event listener toe voor window resize
    window.addEventListener("resize", checkIsMobile);

    // Ruim event listener op bij component unmount
    return () => {
      window.removeEventListener("resize", checkIsMobile);
    };
  }, []);

  return isMobile;
}

function Sheet({ ...props }: React.ComponentProps<typeof SheetPrimitive.Root>) {
  return <SheetPrimitive.Root data-slot="sheet" {...props} />;
}

function SheetTrigger({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Trigger>) {
  return (
    <SheetPrimitive.Trigger
      data-slot="sheet-trigger"
      className={cn(
        "text-muted-foreground p-0.5 [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-5",
        className,
      )}
      {...props}
    />
  );
}

function SheetClose({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Close>) {
  return <SheetPrimitive.Close data-slot="sheet-close" {...props} />;
}

function SheetPortal({
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Portal>) {
  return <SheetPrimitive.Portal data-slot="sheet-portal" {...props} />;
}

function SheetOverlay({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Overlay>) {
  return (
    <SheetPrimitive.Overlay
      data-slot="sheet-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className,
      )}
      {...props}
    />
  );
}

function SheetContent({
  className,
  children,
  side: propSide,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Content> & {
  side?: "top" | "right" | "bottom" | "left";
}) {
  const isMobile = useIsMobile();
  const side = propSide || (isMobile ? "bottom" : "right");

  return (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content
        data-slot="sheet-content"
        className={cn(
          "data-[state=open]:animate-in data-[state=closed]:animate-out fixed z-50 flex flex-col gap-4 overflow-y-auto bg-white transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
          side === "right" &&
            "data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right inset-y-0 right-0 h-full w-3/4 sm:max-w-md",
          side === "left" &&
            "data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-md",
          side === "top" &&
            "data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top inset-x-0 top-0 h-auto border-b",
          side === "bottom" &&
            "data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom inset-x-0 bottom-0 h-auto max-h-[calc(100%-3rem)] rounded-t-lg",
          className,
        )}
        {...props}
      >
        {children}
        <SheetPrimitive.Close className="focus:ring-ring bg-accent absolute top-0 right-0 h-10 w-10 rounded-bl-lg p-2 ring-offset-white focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none">
          <CloseLine className="size-6 text-white" aria-hidden="true" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  );
}

function SheetHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-header"
      className={cn("flex flex-col gap-1.5 p-6", className)}
      {...props}
    />
  );
}

function SheetFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="sheet-footer"
      className={cn("mt-auto flex flex-col gap-2 p-6", className)}
      {...props}
    />
  );
}

function SheetTitle({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Title>) {
  return (
    <SheetPrimitive.Title
      data-slot="sheet-title"
      className={cn(
        "w-[calc(100%-(--spacing(10)))] text-xl font-bold",
        className,
      )}
      {...props}
    />
  );
}

function SheetDescription({
  className,
  ...props
}: React.ComponentProps<typeof SheetPrimitive.Description>) {
  return (
    <SheetPrimitive.Description
      data-slot="sheet-description"
      className={cn("text-sm", className)}
      {...props}
    />
  );
}

export {
  Sheet,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
};
</file>

<file path="src/components/ui/tabs.tsx">
"use client";

import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root data-slot="tabs" className={cn(className)} {...props} />
  );
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground mb-5 inline-flex w-fit flex-wrap items-center justify-center rounded-lg p-1",
        className,
      )}
      {...props}
    />
  );
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring text-muted-foreground data-[state=active]:text-primary inline-flex h-[calc(100%-1px)] min-h-12 flex-1 items-center justify-center gap-1.5 rounded border border-transparent px-4 py-2.75 font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-2 focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-white data-[state=active]:font-semibold data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className,
      )}
      {...props}
    />
  );
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("outline-none", className)}
      {...props}
    />
  );
}

export { Tabs, TabsList, TabsTrigger, TabsContent };
</file>

<file path="src/components/ui/checkbox.tsx">
"use client";

import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import CheckLine from "../../../public/icons/MingCute/check_line.svg";

import { cn } from "@/lib/utils";

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-control data-[state=checked]:bg-secondary data-[state=checked]:border-secondary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 aria-invalid:border-destructive size-6 shrink-0 rounded border outline-none focus-visible:ring-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:text-white",
        className,
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckLine className="size-5" aria-hidden="true" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  );
}

export { Checkbox };
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react";

import { cn } from "@/lib/utils";

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary border-input selection:text-primary-foreground flex h-12 w-full min-w-0 rounded border bg-transparent p-4 transition-[color] outline-none file:inline-flex file:h-6 file:border-0 file:bg-transparent file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-2",
        "aria-invalid:ring-destructive/20 aria-invalid:border-destructive",
        className,
      )}
      {...props}
    />
  );
}

export { Input };
</file>

<file path="src/components/ui/radio-group.tsx">
"use client";

import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";

import { cn } from "@/lib/utils";

function RadioGroup({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Root>) {
  return (
    <RadioGroupPrimitive.Root
      data-slot="radio-group"
      className={cn("flex flex-wrap gap-2", className)}
      {...props}
    />
  );
}

function RadioGroupItem({
  className,
  ...props
}: React.ComponentProps<typeof RadioGroupPrimitive.Item>) {
  return (
    <RadioGroupPrimitive.Item
      data-slot="radio-group-item"
      className={cn(
        "border-control data-[state=checked]:border-primary text-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:border-destructive aria-invalid:ring-destructive/20 aspect-square size-6 shrink-0 rounded-full border bg-white transition-[color] outline-none focus-visible:ring-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator
        data-slot="radio-group-indicator"
        className="relative flex items-center justify-center"
      >
        <Circle className="fill-primary absolute top-1/2 left-1/2 size-3 -translate-x-1/2 -translate-y-1/2" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
}

export { RadioGroup, RadioGroupItem };
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded border px-4 py-3 grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-4 gap-y-0.5 items-start [&>svg]:size-5 [&>svg]:translate-y-0.5 [&>svg]:text-current text-pretty",
  {
    variants: {
      variant: {
        default: "border-muted bg-muted/40 text-primary",
        success:
          "bg-success-background border-success/20 text-success-on-background [&>svg]:text-success",
        destructive:
          "bg-destructive-background border-destructive/20 text-destructive-on-background [&>svg]:text-destructive",
        info: "bg-info-background [&>svg]:text-info border-info/20 text-info-on-background",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  );
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn("col-start-2 min-h-4 font-semibold", className)}
      {...props}
    />
  );
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn("col-start-2 grid justify-items-start gap-1", className)}
      {...props}
    />
  );
}

export { Alert, AlertTitle, AlertDescription };
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded font-semibold transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-5 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-2 aria-invalid:ring-destructive/20 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-secondary text-secondary-foreground ring-offset-2 hover:bg-secondary-hover inset-shadow-button",
        outline:
          "border border-primary hover:bg-primary hover:text-primary-foreground",
        border: "border hover:border-primary",
        link: "text-primary hover:text-secondary-hover",
      },
      size: {
        default: "min-h-12 px-6 py-2.75",
        sm: "min-h-10 px-4 py-2.25 text-sm",
        icon: "size-5",
      },
    },
    compoundVariants: [
      {
        variant: "default",
        size: "default",
        className:
          "pt-2.5 pb-[calc((--spacing(2.5))+var(--inset-shadow-button-y))]",
      },
      {
        variant: "default",
        size: "sm",
        className:
          "pt-2 pb-[calc((--spacing(2))+var(--inset-shadow-button-y))]",
      },
    ],
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };
</file>

<file path="src/components/measuring-tool/YesNoRadioGroup.tsx">
import React from "react";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";

// Props voor de YesNoRadioGroup component.
interface YesNoRadioGroupProps {
  id: string;
  name: string;
  value: boolean | undefined;
  onChange: (value: boolean) => void;
  yesLabel: string;
  noLabel: string;
  "aria-describedby"?: string;
  "aria-labelledby"?: string;
}

// Props voor de RadioOption component.
interface RadioOptionProps {
  id: string;
  value: string;
  label: string;
}

// Een helper component om een individuele radio optie te renderen.
const RadioOption: React.FC<RadioOptionProps> = ({ id, value, label }) => (
  <Label
    htmlFor={id}
    className="group hover:bg-muted/30 has-[:checked]:bg-muted/30 has-[:focus-visible]:border-ring has-[:focus-visible]:ring-ring/50 has-[:checked]:border-primary has-[:checked]:text-primary flex min-h-12 flex-1 cursor-pointer items-center gap-x-2 rounded-sm border px-4 py-2.75 text-muted-foreground has-[:disabled]:cursor-not-allowed has-[:disabled]:opacity-50 has-[:disabled]:hover:bg-transparent has-[:focus-visible]:ring-2"
  >
    <RadioGroupItem
      value={value}
      id={id}
      className="peer focus-visible:ring-0 focus-visible:outline-none"
      aria-label={label}
    />
    <span className="text-base font-medium group-has-[:checked]:font-semibold peer-focus-visible:outline-none">
      {label}
    </span>
  </Label>
);

// Een herbruikbare radiogroep voor "Ja" of "Nee" selecties.
// Deze component werkt intern met booleaanse waarden (`true`/`false`)
// voor een eenvoudige integratie met formulierlogica.
export const YesNoRadioGroup: React.FC<YesNoRadioGroupProps> = ({
  id,
  name,
  value,
  onChange,
  yesLabel,
  noLabel,
  "aria-describedby": ariaDescribedBy,
  "aria-labelledby": ariaLabelledBy,
}) => {
  const options = [
    { id: `${id}-yes`, value: "true", label: yesLabel },
    { id: `${id}-no`, value: "false", label: noLabel },
  ];

  // Converteert de string-waarde van de radiogroep ("true" of "false")
  // naar een booleaanse waarde voordat de `onChange`-callback wordt aangeroepen.
  const handleValueChange = (val: string) => {
    onChange(val === "true");
  };

  return (
    <RadioGroup
      onValueChange={handleValueChange}
      value={value === undefined ? "" : String(value)}
      name={name}
      aria-describedby={ariaDescribedBy}
      aria-labelledby={ariaLabelledBy}
    >
      {options.map((option) => (
        <RadioOption
          key={option.id}
          id={option.id}
          value={option.value}
          label={option.label}
        />
      ))}
    </RadioGroup>
  );
};
</file>

<file path="src/app/measuring-tool/page.tsx">
import type { Metadata } from "next";
import Header from "@/components/header";
import { getTranslations } from "next-intl/server";
import { useTranslations } from "next-intl";
import { ClientSection } from "@/components/measuring-tool/ClientSection";

export async function generateMetadata(): Promise<Metadata> {
  const t = await getTranslations("Pages.MeasuringTool.metaData");

  return {
    title: t("title"),
    description: t("description"),
  };
}

export default function MeasuringTool() {
  const t = useTranslations("Pages.MeasuringTool");

  return (
    <>
      <Header />
      <main
        className="container mx-auto min-h-[calc(100dvh-(--spacing(19)))] px-4 py-12 sm:px-6 xl:pt-20"
        role="main"
      >
        <ClientSection
          measuringHeightPavingAlt={t("a11y.MeasuringHeightPavingAlt")}
          measuringHeightRecessedAlt={t("a11y.MeasuringHeightRecessedAlt")}
          tabsHeightBottomGutter={t("tabs.heightBottomGutter")}
          tabsWallProfileHeight={t("tabs.wallProfileHeight")}
          heading={t.rich("heading", {
            sup: (chunks) => <sup>{chunks}</sup>,
          })}
        />
      </main>
    </>
  );
}
</file>

<file path="src/components/header.tsx">
import Link from "next/link";
import Logo from "../../public/brand/tm-logo.svg";
import { useTranslations } from "next-intl";

export default function Header() {
  const t = useTranslations("Components.Header");

  return (
    <header
      className="bg-primary h-19"
      role="banner"
      aria-label={t("a11y.siteHeader")}
    >
      <nav role="navigation" aria-label={t("a11y.mainNavigation")}>
        <div className="container mx-auto px-4 sm:px-6">
          <Link
            href="/"
            aria-label={t("a11y.logoAriaLabel")}
            className="group relative"
          >
            <div className="bg-primary border-primary-shadow group-focus-visible:ring-ring/50 absolute top-0 z-10 rounded-b-sm border-x-2 border-b-2 px-6 pt-4 pb-6 group-focus-visible:ring-2 group-focus-visible:ring-offset-2 group-focus-visible:outline-none">
              <Logo width={96} height={61} aria-hidden="true" />
            </div>
          </Link>
        </div>
      </nav>
    </header>
  );
}
</file>

<file path="src/app/not-found.tsx">
import type { Metadata } from "next";
import Header from "@/components/header";
import Link from "next/link";
import { getTranslations } from "next-intl/server";
import { useTranslations } from "next-intl";
import Image from "next/image";
import { buttonVariants } from "@/components/ui/button";
import illustration404 from "/public/images/404-illustration.png";

export async function generateMetadata(): Promise<Metadata> {
  const t = await getTranslations("Pages.NotFound.metaData");

  return {
    title: t("title"),
    description: t("description"),
  };
}

export default function NotFound() {
  const t = useTranslations("Pages.NotFound");

  return (
    <>
      <Header />
      <main
        className="container mx-auto flex min-h-[calc(100dvh-(--spacing(19)))] flex-col items-center justify-center gap-y-4 px-4 py-12 text-center sm:px-6 xl:pt-20"
        role="main"
        aria-live="polite"
      >
        <Image
          src={illustration404}
          alt={t("a11y.imageAlt")}
          priority
          fetchPriority="high"
          placeholder="blur"
          width={1024}
          height={443}
          sizes="
            (min-width: 1024px) calc(1024px - 48px),
            (min-width: 768px) calc(768px - 48px),
            (min-width: 640px) calc(640px - 48px),
            calc(100vw - 32px)"
        />

        <h1>{t("heading")}</h1>

        <p id="not-found-description" className="text-muted-foreground">
          {t("description")}
        </p>

        {/* Link terug naar de homepage met een toegankelijke beschrijving. */}
        <Link
          href="/"
          className={buttonVariants({ variant: "default" })}
          aria-describedby="back-to-home-sr-description"
        >
          {t("backToHome")}
        </Link>

        {/* Verborgen beschrijving voor screenreaders. */}
        <p id="back-to-home-sr-description" className="sr-only">
          {t("a11y.backToHomeDescription")}
        </p>
      </main>
    </>
  );
}
</file>

<file path="src/components/home/StoreCard.tsx">
"use client";

import { useTranslations } from "next-intl";
import { CircleFlag } from "react-circle-flags";
import { Button } from "@/components/ui/button";
import ArrowRightLine from "../../../public/icons/MingCute/arrow_right_line.svg";
import { type StoreData } from "@/data/stores";

// Vertaalt een landcode naar een vlagcode die door `react-circle-flags` wordt ondersteund.
const getFlagCountryCode = (countryCode: string): string => {
  const flagMap: Record<string, string> = {
    "BE-NL": "be",
    "BE-FR": "be",
    EN: "gb",
  };
  return flagMap[countryCode] || countryCode.toLowerCase();
};

// Props voor de StoreCard component.
interface StoreCardProps {
  // De data van de store.
  store: StoreData;
  // Geeft aan of dit de voorkeurselectie is.
  isPreferred?: boolean;
  // Callback-functie die wordt aangeroepen bij selectie.
  onSelectStore: (storeUrl: string) => void;
  // Geeft aan of de card is uitgeschakeld.
  disabled?: boolean;
}

// Rendert een klikbare card voor een specifiek land.
export function StoreCard({
  store,
  isPreferred = false,
  onSelectStore,
  disabled = false,
}: StoreCardProps) {
  const t = useTranslations("Components.StoreCard");

  // Behandelt de klik op de card en roept de `onSelectStore` callback aan.
  const handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    e.preventDefault();
    if (!disabled) {
      onSelectStore(store.storeUrl);
    }
  };

  return (
    <Button
      type="button"
      variant="border"
      className="group min-h-13 w-full px-4"
      disabled={disabled}
      onClick={handleClick}
    >
      <div className="flex flex-1 items-center gap-x-3">
        <CircleFlag
          countryCode={getFlagCountryCode(store.countryCode)}
          title={t("a11y.flagAlt", { country: store.country })}
          alt={t("a11y.flagAlt", { country: store.country })}
          width={24}
          height={24}
          className="size-6"
        />
        {isPreferred ? (
          <span className="text-left">{t("goToStore")}</span>
        ) : (
          <div className="flex flex-wrap items-center gap-x-1.5">
            <span className="sr-only">{t("selectCountry")}</span>
            <span className="text-left">{store.country}</span>
            <span className="text-muted-foreground text-sm">
              ({store.language})
            </span>
          </div>
        )}
      </div>
      <ArrowRightLine
        className="opacity-0 transition-opacity group-hover:opacity-100 group-focus-visible:opacity-100"
        aria-hidden="true"
      />
    </Button>
  );
}
</file>

<file path="src/components/home/StoreSelection.tsx">
"use client";

import { useState, useTransition } from "react";
import { useRouter } from "next/navigation";
import { useTranslations } from "next-intl";
import { StoreCard } from "./StoreCard";
import { type StoreData } from "@/data/stores";

interface StoreSelectionProps {
  // De gedetecteerde voorkeurselectie van de gebruiker, indien aanwezig.
  preferredStore: StoreData | undefined;
  // Een lijst met alle andere beschikbare landen.
  otherStores: StoreData[];
}

// Rendert de UI voor het selecteren van een land, beheert de laadstatus
// en de navigatie inclusief het opslaan van de keuze in een cookie.
export default function StoreSelection({
  preferredStore,
  otherStores,
}: StoreSelectionProps) {
  const t = useTranslations("Components.StoreSelection");
  const router = useRouter();
  const [saveSelection, setSaveSelection] = useState(false);
  const [isPending, startTransition] = useTransition();

  const isLoading = isPending; // Gebruik `isPending` voor een betere UX bij navigatie.

  // Behandelt de selectie van een winkel.
  // Slaat de voorkeur op in een cookie indien aangevinkt en navigeert naar de URL.
  const handleSelectStore = (storeUrl: string) => {
    startTransition(() => {
      try {
        if (saveSelection) {
          // Cookie instellen om de keuze 365 dagen te onthouden.
          document.cookie = `preferredStore=${encodeURIComponent(
            storeUrl,
          )}; path=/; max-age=31536000; Secure; SameSite=Strict`;
        }
        router.push(storeUrl);
      } catch (error) {
        console.error(error);
      }
    });
  };

  return (
    <div
      className="no-scrollbar col-span-12 overflow-y-auto p-5 xl:col-span-5 xl:p-10"
      role="region"
      aria-label={t("selectCountry")}
    >
      {preferredStore && (
        <>
          <h1 className="mb-5 text-2xl font-bold">{t("selectCountry")}</h1>
          <div className="mb-6">
            <p className="text-muted-foreground mb-2 text-sm font-semibold">
              {t("areYouFrom", { country: preferredStore.country })}
            </p>
            <StoreCard
              store={preferredStore}
              isPreferred={true}
              onSelectStore={handleSelectStore}
              disabled={isLoading}
            />
          </div>
          <p className="text-muted-foreground mb-2 text-sm font-semibold">
            {t("otherCountryPreference")}
          </p>
        </>
      )}

      <ul
        className="grid grid-cols-[repeat(auto-fit,minmax(min(278px,100%),1fr))] gap-2"
        role="list"
      >
        {otherStores.map((store) => (
          <li key={store.countryCode} role="listitem">
            <StoreCard
              store={store}
              onSelectStore={handleSelectStore}
              disabled={isLoading}
            />
          </li>
        ))}
      </ul>
    </div>
  );
}
</file>

<file path="package.json">
{
  "name": "tm-com",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@formatjs/intl-localematcher": "^0.6.1",
    "@hookform/resolvers": "^5.1.1",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-tabs": "^1.1.12",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.18.1",
    "lucide-react": "^0.518.0",
    "negotiator": "^1.0.0",
    "next": "^15.3.4",
    "next-intl": "^4.1.0",
    "postcss": "^8.5.6",
    "react": "^19.1.0",
    "react-circle-flags": "^0.0.23",
    "react-dom": "^19.1.0",
    "react-hook-form": "^7.58.1",
    "tailwind-merge": "^3.3.1",
    "zod": "^3.25.67"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.3.1",
    "@svgr/webpack": "^8.1.0",
    "@tailwindcss/postcss": "^4.1.10",
    "@types/negotiator": "^0.6.4",
    "@types/node": "^24.0.3",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "eslint": "^9.29.0",
    "eslint-config-next": "15.3.4",
    "prettier": "^3.5.3",
    "prettier-plugin-tailwindcss": "^0.6.13",
    "tailwindcss": "^4.1.10",
    "tw-animate-css": "^1.3.4",
    "typescript": "^5.8.3"
  }
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import localFont from "next/font/local";
import { NextIntlClientProvider } from "next-intl";
import { getLocale, getTranslations } from "next-intl/server";

import "./globals.css";

// Laadt het lokale 'Articulat CF' lettertype en stelt het beschikbaar als een CSS-variabele.
const articulatCF = localFont({
  src: [
    {
      path: "../../public/fonts/Articulat_CF/articulatcf-medium-500.ttf",
      weight: "500",
      style: "normal",
    },
    {
      path: "../../public/fonts/Articulat_CF/articulatcf-demibold-600.ttf",
      weight: "600",
      style: "normal",
    },
    {
      path: "../../public/fonts/Articulat_CF/articulatcf-bold-700.ttf",
      weight: "700",
      style: "normal",
    },
    {
      path: "../../public/fonts/Articulat_CF/articulatcf-heavy-900.ttf",
      weight: "900",
      style: "normal",
    },
  ],
  variable: "--font-articulat-cf", // CSS-variabele naam voor eenvoudige styling.
  fallback: ["system-ui", "sans-serif"], // Fallback lettertypen voor robuustheid.
  display: "swap", // Zorgt voor snelle weergave van tekst tijdens het laden.
});

// Genereert de standaard metadata voor de applicatie.
// Kan per pagina worden overschreven of uitgebreid.
export async function generateMetadata(): Promise<Metadata> {
  const t = await getTranslations("Pages.Home.metaData");

  return {
    title: {
      template: "%s | Tuinmaximaal", // Een template voor paginatitels.
      default: t("title"), // De standaardtitel voor de homepage.
    },
    description: t("description"),
    keywords: t("keywords"),
  };
}

export default async function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const locale = await getLocale();

  return (
    <html lang={locale}>
      <body
        className={`${articulatCF.variable} font-sans antialiased`}
      >
        <NextIntlClientProvider>{children}</NextIntlClientProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";
@import "tw-animate-css";

@theme {
  --dash: "-";
  --inset-shadow-button-y: 4px;
  --inset-shadow-button: inset 0px calc(var(--inset-shadow-button-y) * -1) 0px
    oklch(0% 0 0 / 0.2);
  --tw-leading: 1.5;
  --color-surface: oklch(95.1% 0.035 68.7);
  --color-background: oklch(97.5% 0.017 67.6);
  --color-foreground: oklch(27.1% 0.068 154.6);
  --color-card: oklch(100% 0 0);
  --color-card-foreground: oklch(27.1% 0.068 154.6);
  --color-popover: oklch(100% 0 0);
  --color-popover-foreground: oklch(50% 0 0);
  --color-primary: oklch(27.1% 0.068 154.6);
  --color-primary-foreground: oklch(100% 0 0);
  --color-primary-shadow: oklch(19.1% 0.036 175.1);
  --color-secondary: oklch(55.9% 0.14 124.7);
  --color-secondary-foreground: oklch(100% 0 0);
  --color-secondary-hover: oklch(47.6% 0.119 124.5);
  --color-muted: oklch(91.6% 0 0);
  --color-muted-foreground: oklch(50% 0 0);
  --color-accent: oklch(68.7% 0.188 47.8);
  --color-accent-foreground: oklch(100% 0 0);
  --color-destructive: oklch(59.8% 0.245 29.2);
  --color-destructive-foreground: oklch(100% 0 0);
  --color-destructive-background: oklch(59.8% 0.245 29.2 / 0.06);
  --color-destructive-on-background: oklch(57.1% 0.234 29.2);
  --color-success: oklch(55.1% 0.17 137.9);
  --color-success-foreground: oklch(100% 0 0);
  --color-success-background: oklch(55.1% 0.17 137.9 / 0.08);
  --color-success-on-background: oklch(52.7% 0.162 137.8);
  --color-info: oklch(56.9% 0.169 251.7);
  --color-info-foreground: oklch(100% 0 0);
  --color-info-background: oklch(56.9% 0.169 251.7 / 0.08);
  --color-info-on-background: oklch(44% 0.132 252);
  --color-control: oklch(50% 0 0);
  --color-border: oklch(91.6% 0 0);
  --color-input: oklch(91.6% 0 0);
  --color-ring: oklch(70.8% 0 0);
}

@theme inline {
  --font-sans: var(--font-articulat-cf);
}

/* Hide scrollbar for Chrome, Safari and Opera */
.no-scrollbar::-webkit-scrollbar {
  @apply hidden;
}

/* Hide scrollbar for IE, Edge and Firefox */
.no-scrollbar {
  -ms-overflow-style: none; /* IE and Edge */
  scrollbar-width: none; /* Firefox */
}

@layer base {
  html {
    scrollbar-gutter: stable;
  }
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
  button,
  [role="button"] {
    @apply cursor-pointer;
  }
  button:disabled,
  [role="button"]:disabled {
    @apply cursor-default;
  }
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    @apply text-balance;
  }
  h1 {
    @apply text-4xl font-black;
  }
  h2 {
    @apply text-3xl font-black;
  }
  h3 {
    @apply text-2xl font-black;
  }
  h4 {
    @apply text-xl font-bold;
  }
  h5 {
    @apply text-lg font-bold;
  }
  h6 {
    @apply text-base font-semibold;
  }
  p {
    @apply text-pretty;
  }
}

@layer utilities {
  label[data-required] span::after,
  legend[data-required] span::after {
    content: "*";
    @apply text-destructive mx-1;
  }
  .trans-all * {
    @apply transition-all duration-300;
  }
}
</file>

<file path="src/app/page.tsx">
import Image from "next/image";
import { useLocale, useTranslations } from "next-intl";
import Header from "@/components/header";
import heroImage from "/public/images/tuinmaximaal-verandas.jpg";
import StoreSelection from "@/components/home/StoreSelection";
import { STORES_DATA } from "@/data/stores";
import { getStoreLocalization } from "@/lib/storeUtils";

export default function Home() {
  const t = useTranslations("Pages.Home");
  const locale = useLocale(); // Haalt de huidige taal/land-code op (bijv. 'nl').
  const userCountryCode = locale.toUpperCase();
  // Bepaalt de landselectie en de overige landen op basis van de locale van de gebruiker.
  const { preferredStore, otherStores } = getStoreLocalization(
    userCountryCode,
    STORES_DATA,
  );

  return (
    <>
      <Header />
      <main
        className="container mx-auto px-4 py-12 sm:px-6 xl:h-[calc(100dvh-(--spacing(19)))] xl:pt-20"
        role="main"
        aria-label={t("a11y.mainContentLabel")}
      >
        <section className="overflow-hidden rounded-lg bg-white xl:h-full">
          <div className="grid grid-cols-12 xl:h-full">
            {/* Sectie voor de afbeelding */}
            <div className="relative col-span-12 max-xl:aspect-16/9 xl:col-span-7">
              <Image
                src={heroImage}
                alt={t("a11y.heroImageAlt")}
                fill
                priority
                fetchPriority="high"
                placeholder="blur"
                className="object-cover object-[center_55%]"
                sizes="
                  (min-width: 1536px) calc((1536px - 48px) * 7/12),
                  (min-width: 1280px) calc((1280px - 48px) * 7/12),
                  (min-width: 1024px) calc(1024px - 48px),
                  (min-width: 768px) calc(768px - 48px),
                  (min-width: 640px) calc(640px - 48px),
                  calc(100vw - 32px)"
              />
            </div>

            {/* Sectie voor de landselectie */}
            <StoreSelection
              preferredStore={preferredStore}
              otherStores={otherStores}
            />
          </div>
        </section>
      </main>
    </>
  );
}
</file>

<file path="messages/de.json">
{
  "Pages": {
    "Home": {
      "metaData": {
        "title": "Willkommen bei Tuinmaximaal",
        "description": "Tuinmaximaal gibt Ihnen die Bestpreisgarantie für alle Terrassenüberdachungen und Glasschiebewände. Bestellen Sie Ihre Überdachung als einfach zu montierenden Bausatz.",
        "keywords": "Terrassenüberdachung, Glasschiebewand, Glasdach, Aluminium Terrassenüberdachung, Bausatz, Überdachung, Bestpreisgarantie"
      },
      "a11y": {
        "heroImageAlt": "Moderne Terrassenüberdachung von Tuinmaximaal mit matt schwarzem Aluminiumrahmen und Glasschiebewänden.",
        "mainContentLabel": "Homepage-Inhalt mit Geschäftsauswahl"
      }
    },
    "NotFound": {
      "metaData": {
        "title": "Seite nicht gefunden",
        "description": "Hoppla! Die gesuchte Seite wurde nicht gefunden. Überprüfen Sie die URL oder kehren Sie zur Startseite zurück."
      },
      "heading": "Hoppla! Seite nicht gefunden.",
      "description": "Wir können die gesuchte Seite nicht finden. Aber keine Sorge, wir helfen Ihnen gerne weiter!",
      "backToHome": "Zurück zur Startseite",
      "a11y": {
        "imageAlt": "404 Fehler-Illustration",
        "backToHomeDescription": "Zurück zur Startseite navigieren"
      }
    },
    "MeasuringTool": {
      "metaData": {
        "title": "Messanleitung Gumax® Glasschiebewand",
        "description": "Nutzen Sie unsere Messanleitung für das exakte Ausmessen Ihrer Gumax® Glasschiebewand"
      },
      "heading": "Messanleitung Gumax<sup>®</sup> Glasschiebewand",
      "tabs": {
        "wallProfileHeight": "Höhe bis Unterkante Wandprofil",
        "heightBottomGutter": "Höhe bis Unterkante Rinne"
      },
      "a11y": {
        "measuringToolVideoTitle": "Messanleitung Gumax® Glasschiebewand - Neue Gumax® Überdachung",
        "measuringToolVideoAlt": "Video mit Messanleitungen für die Gumax® Glasschiebewand, inklusive Tipps zum Messen der Höhe und Neigung der Terrassenüberdachung.",
        "calculatorTabsLabel": "Höhenberechnung Optionen",
        "MeasuringSlopeAlt": "Abbildung zur Messung der Terrassenneigung",
        "MeasuringHeightPavingAlt": "Messen der Höhe vom vorhandenen Pflaster bis zur Unterkante der Rinne der Tuinmaximaal Terrassenüberdachung mittels Maßband, unerlässlich für den Einbau von Glasschiebewänden.",
        "MeasuringHeightRecessedAlt": "Genaues Messen der Montagehöhe für Tuinmaximaal Glasschiebewände von einer eingelassenen Fundamentrinne bis zum oberen Rahmen der Terrassenüberdachung.",
        "MeasuringWidthFrontAlt": "Demonstration der Messung der lichten Vorderseite Öffnungsbreite zwischen den Pfosten der Tuinmaximaal Terrassenüberdachung mittels Maßband zur Bestellung von Glasschiebewänden in korrekter Größe.",
        "MeasuringWidthSideAlt": "Messen der seitlichen Tiefe einer Tuinmaximaal Terrassenüberdachung, von der Hauswand bis zu einem äußeren Stützpfosten, um die korrekte Passform der Glasschiebewände sicherzustellen."
      }
    }
  },
  "Components": {
    "Header": {
      "a11y": {
        "logoAriaLabel": "Tuinmaximaal Startseite",
        "mainNavigation": "Hauptnavigation",
        "siteHeader": "Seitenkopf"
      }
    },
    "StoreSelection": {
      "selectCountry": "Wählen Sie Ihr Land",
      "areYouFrom": "Kommen Sie aus {country}?",
      "otherCountryPreference": "Bevorzugen Sie ein anderes Land?",
      "saveSelection": "Meine Auswahl für zukünftige Besuche speichern."
    },
    "StoreCard": {
      "selectCountry": "Land auswählen",
      "goToStore": "Weiter zum deutschen Online-Shop",
      "a11y": {
        "flagAlt": "Flagge von {country}"
      }
    },
    "Form": {
      "Common": {
        "yes": "Ja",
        "no": "Nein",
        "info": "Info",
        "moreInformation": "Weitere Informationen",
        "recommendation": "Empfehlung",
        "depthVeranda": "Tiefe der Terrassenüberdachung",
        "depthVerandaTooltip": "Messen Sie die Tiefe Ihrer Terrassenüberdachung von der Wand bis zur Vorderkante der Rinne. Dieses Maß beeinflusst die erforderlichen Spezifikationen, wenn Sie die Schiebewände unter einer bestehenden Terrassenüberdachung installieren, und ist relevant für den Installationskontext.",
        "MeasuringWidthSideCaption": "Messung der Tiefe der Terrassenüberdachung von der Wand bis zur Vorderseite.",
        "slope": "Gefälle Ihrer Terrasse",
        "slopeTooltip": "Prüfen Sie, ob Ihre Terrasse ein Gefälle aufweist, und messen Sie den Höhenunterschied über die Tiefe der Terrassenüberdachung. Wenn Ihre Terrasse zum Garten hin abfällt, müssen Sie diesen Unterschied bei der Bestimmung der Montagehöhe des Wandprofils ausgleichen; die Durchgangshöhe bleibt gleich. Berücksichtigen Sie auch die 18 mm Höhe der unteren Schiene, falls Sie planen, diese zu versenken, da dies die Gesamtberechnungen beeinflussen kann.",
        "MeasuringSlopeCaption": "Bestimmung des Terrassengefälles und des Höhenunterschieds.",
        "MeasuringWidthFrontCaption": "Messung der Vorderseite der Terrassenüberdachung.",
        "slopePlaceholder": "Terrassengefälle",
        "measurementUnitMm": "mm",
        "measurementUnitMeter": "Meter",
        "unitLabel": "Einheit: {unit}",
        "calculatePassageHeight": "Durchgangshöhe an der Rinne berechnen",
        "calculateBottomWallProfileHeight": "Wandprofilhöhen berechnen",
        "passageHeightResult": "Die berechnete Durchgangshöhe an der Rinne beträgt: <strong>{result} mm</strong>.",
        "rangeSuccess": "Wählen Sie die Durchgangshöhe des Schienensystems: <strong>{min} - {max} mm</strong>.",
        "validationErrors": {
          "selectOption": "Wählen Sie eine Option",
          "enterNumber": "Geben Sie eine Zahl ein",
          "integerOnly": "Nur ganze Millimeter sind erlaubt",
          "validNumberRequired": "Geben Sie eine gültige Zahl ein",
          "suggestionMessage": "Versuchen Sie eine {fieldName} von {recommendedInput} mm, um in den Bereich von {min} - {max} mm zu fallen.",
          "wallProfileHeightFieldName": "Wandprofilhöhe",
          "passageHeightFieldName": "Durchgangshöhe"
        }
      },
      "WallProfileHeight": {
        "label": "Höhe bis Unterkante Wandprofil vom Boden (0° Gefälle)",
        "placeholder": "Höhe bis Unterkante Wandprofil",
        "tooltip": "Dies ist die Höhe, in der das Wandprofil (an dem die Terrassenüberdachung oder der obere Teil der Schiebewandkonstruktion befestigt ist) an der Fassade montiert wird, gemessen vom Boden. Bei einer Terrasse ohne Gefälle (0°) entspricht diese Höhe direkt dem Wert aus den Tabellen/Messhilfe, basierend auf Ihrer gewünschten Durchgangshöhe und Tiefe.",
        "railSystemQuestion": "Schienensystem im Boden versenken",
        "railSystemQuestionTooltip": "Erwägen Sie, die untere Schiene des Schiebesystems im Boden zu versenken. Dies schafft einen schwellenfreien Durchgang. Wenn Sie sich hierfür entscheiden, addieren Sie 18 mm (die Höhe der unteren Schiene) zu Ihrer gemessenen Durchgangshöhe hinzu.",
        "MeasuringHeightPavingCaption": "Messung der vertikalen Höhe vom Boden für die Profilmontage.",
        "MeasuringHeightRecessedCaption": "Beispiel eines versenkten Schienensystems für einen schwellenfreien Durchgang."
      },
      "HeightBottomGutter": {
        "label": "Höhe bis Unterkante Rinne vom Boden (0° Gefälle)",
        "placeholder": "Höhe bis Unterkante Rinne",
        "tooltip": "Dies ist die \"Durchgangshöhe\": der Abstand von der Oberkante Ihres Fundaments/Pflasters bis zur flachen Unterseite der Rinne Ihrer (bestehenden) Terrassenüberdachung. Messen Sie dies an drei Punkten (links, Mitte, rechts) und verwenden Sie den niedrigsten gemessenen Wert. Bei einer Terrasse ohne Gefälle (0°) ist dies das direkte vertikale Maß.",
        "MeasuringHeightPavingCaption": "Messung der Höhe vom Boden bis zur Unterkante der Rinne.",
        "wallProfileHeightsResultTitle": "Die berechneten Wandprofilhöhen:",
        "bottomWallProfileHeightLabel": "Unterkante Wandprofil: <strong>{height} mm</strong>",
        "topWallProfileHeightLabel": "Oberkante Wandprofil: <strong>{height} mm</strong>",
        "walkthroughHeightRangeLabel": "Wählen Sie die Durchgangshöhe des Schienensystems: <strong>{min} - {max} mm</strong>."
      }
    }
  },
  "Video": {
    "playVideoAriaLabel": "Video über {title} abspielen"
  }
}
</file>

<file path="messages/en.json">
{
  "Pages": {
    "Home": {
      "metaData": {
        "title": "Welcome to Tuinmaximaal",
        "description": "Tuinmaximaal offers the lowest price guarantee on verandas and glass sliding doors. Order your garden structure as an easy-to-assemble kit.",
        "keywords": "veranda, glass sliding doors, garden veranda, aluminium veranda, DIY veranda kit, glass garden room, sliding glass wall, patio cover, lowest price guarantee"
      },
      "a11y": {
        "heroImageAlt": "Modern veranda with matte black aluminium frame and glass sliding doors by Tuinmaximaal.",
        "mainContentLabel": "Homepage content with store selection"
      }
    },
    "NotFound": {
      "metaData": {
        "title": "Page not found",
        "description": "Oops! The page you're looking for can't be found. Check the url or return to our homepage."
      },
      "heading": "Oops! Page not found.",
      "description": "We can't find the page you're looking for. But don't worry, we're happy to help you!",
      "backToHome": "Back to Home",
      "a11y": {
        "imageAlt": "404 error illustration",
        "backToHomeDescription": "Navigate back to the homepage"
      }
    },
    "MeasuringTool": {
      "metaData": {
        "title": "Measuring instructions for Gumax® glass sliding doors",
        "description": "Use our measuring instructions tool for accurately measuring your Gumax® glass sliding doors"
      },
      "heading": "Measuring instructions for Gumax<sup>®</sup> glass sliding doors",
      "tabs": {
        "wallProfileHeight": "Height to bottom of wall profile",
        "heightBottomGutter": "Height to bottom of gutter"
      },
      "a11y": {
        "measuringToolVideoTitle": "Measuring instructions Gumax® glass sliding doors - New Gumax® veranda",
        "measuringToolVideoAlt": "Video with measuring instructions for the Gumax® glass sliding wall, including tips for measuring the height and slope of the veranda.",
        "calculatorTabsLabel": "Height calculation options",
        "MeasuringSlopeAlt": "Image showing how to measure terrace slope",
        "MeasuringHeightPavingAlt": "Measuring the height from existing paving to the underside of the gutter of a Tuinmaximaal Veranda using a tape measure, essential for fitting Glass Sliding Doors.",
        "MeasuringHeightRecessedAlt": "Accurately measuring the installation height for Tuinmaximaal Glass Sliding Doors from a recessed foundation channel to the Veranda's upper frame.",
        "MeasuringWidthFrontAlt": "Demonstration of measuring the clear front side opening between Tuinmaximaal Veranda posts with a tape measure for ordering correct size Glass Sliding Doors.",
        "MeasuringWidthSideAlt": "Measuring the side depth of a Tuinmaximaal Veranda, from the house wall to an outer support post, to ensure proper fit of Glass Sliding Doors."
      }
    }
  },
  "Components": {
    "Header": {
      "a11y": {
        "logoAriaLabel": "Tuinmaximaal homepage",
        "mainNavigation": "Main navigation",
        "siteHeader": "Site header"
      }
    },
    "StoreSelection": {
      "selectCountry": "Select your country",
      "areYouFrom": "Are you from {country}?",
      "otherCountryPreference": "Preference for another country?",
      "saveSelection": "Save my selection for later visits."
    },
    "StoreCard": {
      "selectCountry": "Select country",
      "goToStore": "Continue to the UK online shop",
      "a11y": {
        "flagAlt": "Flag of {country}"
      }
    },
    "Form": {
      "Common": {
        "yes": "Yes",
        "no": "No",
        "info": "Info",
        "moreInformation": "More information",
        "recommendation": "Recommendation",
        "depthVeranda": "Veranda depth",
        "depthVerandaTooltip": "Measure the depth of your veranda from the wall to the front of the gutter. This dimension affects the required specifications if you are installing the sliding walls under an existing veranda and is relevant for the installation context.",
        "MeasuringWidthSideCaption": "Measuring the depth of the veranda from the wall to the front.",
        "slope": "Slope of your terrace",
        "slopeTooltip": "Check if your terrace has a slope and measure the height difference over the depth of the veranda. If your terrace slopes downwards towards the garden, you must compensate for this difference when determining the mounting height of the wall profile; the passage height remains the same. Also consider the 18 mm height of the bottom rail if you plan to recess it, as this can affect overall calculations.",
        "MeasuringSlopeCaption": "Determining the terrace slope and height difference.",
        "MeasuringWidthFrontCaption": "Measuring the front side of the veranda.",
        "slopePlaceholder": "Terrace slope",
        "measurementUnitMm": "mm",
        "measurementUnitMeter": "metre",
        "unitLabel": "Unit: {unit}",
        "calculatePassageHeight": "Calculate passage height at gutter",
        "calculateBottomWallProfileHeight": "Calculate wall profile heights",
        "passageHeightResult": "The calculated passage height at the gutter is: <strong>{result} mm</strong>.",
        "rangeSuccess": "Choose rail system passage height: <strong>{min} - {max} mm</strong>.",
        "validationErrors": {
          "selectOption": "Select an option",
          "enterNumber": "Enter a number",
          "integerOnly": "Only whole millimeters are allowed",
          "validNumberRequired": "Enter a valid number",
          "suggestionMessage": "Try a {fieldName} of {recommendedInput} mm to fall within the range of {min} - {max} mm.",
          "wallProfileHeightFieldName": "wall profile height",
          "passageHeightFieldName": "passage height"
        }
      },
      "WallProfileHeight": {
        "label": "Height to bottom of wall profile from ground (0° slope)",
        "placeholder": "Height to bottom of wall profile",
        "tooltip": "This is the height at which the wall profile (to which the veranda or the upper part of the sliding wall construction is attached) is mounted to the façade, measured from the ground. For a terrace with no slope (0°), this height corresponds directly to the value from the tables/measuring tool, based on your desired passage height and depth.",
        "railSystemQuestion": "Recess rail system into the ground",
        "railSystemQuestionTooltip": "Consider recessing the bottom rail of the sliding system into the ground. This creates a threshold-free passage. If you opt for this, add 18 mm (the height of the bottom rail) to your measured passage height.",
        "MeasuringHeightPavingCaption": "Measuring vertical height from the ground for profile mounting.",
        "MeasuringHeightRecessedCaption": "Example of a recessed rail system for a threshold-free passage."
      },
      "HeightBottomGutter": {
        "label": "Height to bottom of gutter from ground (0° slope)",
        "placeholder": "Height to bottom of gutter",
        "tooltip": "This is the \"passage height\": the distance from the top of your foundation/paving to the flat underside of the gutter of your (existing) veranda. Measure this at three points (left, centre, right) and use the lowest measured value. For a terrace with no slope (0°), this is the direct vertical measurement.",
        "MeasuringHeightPavingCaption": "Measuring the height from the ground to the underside of the gutter.",
        "wallProfileHeightsResultTitle": "The calculated wall profile heights:",
        "bottomWallProfileHeightLabel": "Bottom of wall profile: <strong>{height} mm</strong>",
        "topWallProfileHeightLabel": "Top of wall profile: <strong>{height} mm</strong>",
        "walkthroughHeightRangeLabel": "Choose rail system passage height: <strong>{min} - {max} mm</strong>."
      }
    }
  },
  "Video": {
    "playVideoAriaLabel": "Play video about {title}"
  }
}
</file>

<file path="messages/fr.json">
{
  "Pages": {
    "Home": {
      "metaData": {
        "title": "Bienvenue chez Tuinmaximaal",
        "description": "Tuinmaximaal offre la garantie du prix le plus bas sur toutes les vérandas et parois coulissantes en verre. Commandez votre véranda en kit facile à assembler.",
        "keywords": "véranda, paroi coulissante en verre, pergola, véranda aluminium, kit de construction, toiture de terrasse, garantie prix bas"
      },
      "a11y": {
        "heroImageAlt": "Véranda moderne de Tuinmaximaal avec structure en aluminium noir mat et parois coulissantes en verre.",
        "mainContentLabel": "Contenu de la page d'accueil avec sélection de magasin"
      }
    },
    "NotFound": {
      "metaData": {
        "title": "Page non trouvée",
        "description": "Oops! La page que vous cherchez est introuvable. Vérifiez l'url ou retournez à notre page d'accueil."
      },
      "heading": "Oups ! Page non trouvée.",
      "description": "Nous ne trouvons pas la page que vous recherchez. Mais ne vous inquiétez pas, nous sommes heureux de vous aider !",
      "backToHome": "Retour à l'accueil",
      "a11y": {
        "imageAlt": "Illustration d'erreur 404",
        "backToHomeDescription": "Naviguer vers la page d'accueil"
      }
    },
    "MeasuringTool": {
      "metaData": {
        "title": "Instructions de mesure pour la paroi coulissante en verre Gumax®",
        "description": "Utilisez notre outil d'instructions de mesure pour mesurer avec précision votre paroi coulissante en verre Gumax®"
      },
      "heading": "Instructions de mesure paroi coulissante en verre Gumax<sup>®</sup>",
      "tabs": {
        "wallProfileHeight": "Hauteur jusqu'au bas du profilé mural",
        "heightBottomGutter": "Hauteur jusqu'au bas de la gouttière"
      },
      "a11y": {
        "measuringToolVideoTitle": "Instructions de mesure pour les parois coulissantes en verre Gumax® - Nouvelle véranda Gumax®",
        "measuringToolVideoAlt": "Vidéo avec instructions de mesure pour la paroi coulissante en verre Gumax®, avec des conseils pour mesurer la hauteur et la pente de la véranda.",
        "calculatorTabsLabel": "Options de calcul de hauteur",
        "MeasuringSlopeAlt": "Image montrant comment mesurer la pente de la terrasse",
        "MeasuringHeightPavingAlt": "Mesure de la hauteur depuis le pavage existant jusqu'à la sous-face de la gouttière de la Véranda Tuinmaximaal à l'aide d'un mètre ruban, essentielle pour l'installation de Portes et baies coulissantes.",
        "MeasuringHeightRecessedAlt": "Mesure précise de la hauteur d'installation pour les Portes et baies coulissantes Tuinmaximaal depuis un caniveau de fondation encastré jusqu'au cadre supérieur de la Véranda.",
        "MeasuringWidthFrontAlt": "Démonstration de la mesure de la libre avant entre les poteaux de Véranda Tuinmaximaal avec un mètre ruban pour commander des Portes et baies coulissantes de la bonne taille.",
        "MeasuringWidthSideAlt": "Mesure de la profondeur latérale d'une Véranda Tuinmaximaal, du mur de la maison à un poteau de support extérieur, pour assurer un ajustement correct des Portes et baies coulissantes."
      }
    }
  },
  "Components": {
    "Header": {
      "a11y": {
        "logoAriaLabel": "Page d'accueil de Tuinmaximaal",
        "mainNavigation": "Navigation principale",
        "siteHeader": "En-tête du site"
      }
    },
    "StoreSelection": {
      "selectCountry": "Sélectionnez votre pays",
      "areYouFrom": "Venez-vous de {country}?",
      "otherCountryPreference": "Préférence pour un autre pays ?",
      "saveSelection": "Enregistrer ma sélection pour les prochaines visites."
    },
    "StoreCard": {
      "selectCountry": "Sélectionner le pays",
      "goToStore": "Continuer vers la boutique en ligne française",
      "a11y": {
        "flagAlt": "Drapeau de {country}"
      }
    },
    "Form": {
      "Common": {
        "yes": "Oui",
        "no": "Non",
        "info": "Info",
        "moreInformation": "Plus d'informations",
        "recommendation": "Recommandation",
        "depthVeranda": "Profondeur de la véranda",
        "depthVerandaTooltip": "Mesurez la profondeur de votre véranda, du mur jusqu'à l'avant de la gouttière. Cette dimension affecte les spécifications requises si vous installez les parois coulissantes sous une véranda existante et est pertinente pour le contexte de l'installation.",
        "MeasuringWidthSideCaption": "Mesure de la profondeur de la véranda du mur à l'avant.",
        "slope": "Pente de votre terrasse",
        "slopeTooltip": "Vérifiez si votre terrasse a une pente et mesurez la différence de hauteur sur la profondeur de la véranda. Si votre terrasse est en pente vers le jardin, vous devez compenser cette différence lors de la détermination de la hauteur de montage du profilé mural ; la hauteur de passage reste la même. Prenez également en compte la hauteur de 18 mm du rail inférieur si vous prévoyez de l'encastrer, car cela peut affecter les calculs globaux.",
        "MeasuringSlopeCaption": "Détermination de la pente de la terrasse et de la différence de hauteur.",
        "MeasuringWidthFrontCaption": "Mesure de l'avant de la véranda.",
        "slopePlaceholder": "Pente de la terrasse",
        "measurementUnitMm": "mm",
        "measurementUnitMeter": "mètre",
        "unitLabel": "Unité : {unit}",
        "calculatePassageHeight": "Calculer la hauteur de passage à la gouttière",
        "calculateBottomWallProfileHeight": "Calculer les hauteurs du profilé mural",
        "passageHeightResult": "La hauteur de passage calculée à la gouttière est de : <strong>{result} mm</strong>.",
        "rangeSuccess": "Choisissez la hauteur de passage du système de rails : <strong>{min} - {max} mm</strong>.",
        "validationErrors": {
          "selectOption": "Sélectionnez une option",
          "enterNumber": "Entrez un nombre",
          "integerOnly": "Seuls les millimètres entiers sont autorisés",
          "validNumberRequired": "Entrez un nombre valide",
          "suggestionMessage": "Essayez un(e) {fieldName} de {recommendedInput} mm pour être dans la plage de {min} - {max} mm.",
          "wallProfileHeightFieldName": "hauteur de profilé mural",
          "passageHeightFieldName": "hauteur de passage"
        }
      },
      "WallProfileHeight": {
        "label": "Hauteur jusqu'au bas du profilé mural par rapport au sol (pente 0°)",
        "placeholder": "Hauteur jusqu'au bas du profilé mural",
        "tooltip": "C'est la hauteur à laquelle le profilé mural (auquel la véranda ou la partie supérieure de la structure de la paroi coulissante est fixée) est monté sur la façade, mesurée depuis le sol. Pour une terrasse sans pente (0°), cette hauteur correspond directement à la valeur des tableaux/outil d'aide à la mesure, en fonction de votre hauteur de passage et de votre profondeur souhaitées.",
        "railSystemQuestion": "Encastrer le système de rails dans le sol",
        "railSystemQuestionTooltip": "Envisagez d'encastrer le rail inférieur du système coulissant dans le sol. Cela crée un passage sans seuil. Si vous optez pour cela, ajoutez 18 mm (la hauteur du rail inférieur) à votre hauteur de passage mesurée.",
        "MeasuringHeightPavingCaption": "Mesure de la hauteur verticale depuis le sol pour le montage du profilé.",
        "MeasuringHeightRecessedCaption": "Exemple d'un système de rail encastré pour un passage sans seuil."
      },
      "HeightBottomGutter": {
        "label": "Hauteur jusqu'au bas de la gouttière par rapport au sol (pente 0°)",
        "placeholder": "Hauteur jusqu'au bas de la gouttière",
        "tooltip": "Ceci est la \"hauteur de passage\": la distance entre le haut de votre fondation/pavage et le dessous plat de la gouttière de votre véranda (existante). Mesurez-la en trois points (gauche, centre, droite) et utilisez la valeur la plus basse mesurée. Pour une terrasse sans pente (0°), c'est la mesure verticale directe.",
        "MeasuringHeightPavingCaption": "Mesure de la hauteur depuis le sol jusqu'au dessous de la gouttière.",
        "wallProfileHeightsResultTitle": "Les hauteurs de profilé mural calculées :",
        "bottomWallProfileHeightLabel": "Bas du profilé mural : <strong>{height} mm</strong>",
        "topWallProfileHeightLabel": "Haut du profilé mural : <strong>{height} mm</strong>",
        "walkthroughHeightRangeLabel": "Choisissez la hauteur de passage du système de rails : <strong>{min} - {max} mm</strong>."
      }
    }
  },
  "Video": {
    "playVideoAriaLabel": "Lancer la vidéo sur {title}"
  }
}
</file>

<file path="messages/nl.json">
{
  "Pages": {
    "Home": {
      "metaData": {
        "title": "Welkom bij Tuinmaximaal",
        "description": "Tuinmaximaal biedt de laagste prijs garantie op terrasoverkappingen en glazen schuifwanden. Bestel je terrasoverkapping als bouwpakket met gratis thuisbezorging.",
        "keywords": "terrasoverkapping, glazen schuifwand, aluminium terrasoverkapping, bouwpakket, schuifpui, tuinoverkapping, laagste prijs garantie"
      },
      "a11y": {
        "heroImageAlt": "Moderne terrasoverkapping van Tuinmaximaal met mat zwart aluminium frame en glazen schuifwanden.",
        "mainContentLabel": "Homepagina-inhoud met shop selectie"
      }
    },
    "NotFound": {
      "metaData": {
        "title": "Pagina niet gevonden",
        "description": "Oeps! De pagina die je zoekt, kan niet worden gevonden. Controleer de url of ga terug naar onze startpagina."
      },
      "heading": "Oeps! Pagina niet gevonden.",
      "description": "We kunnen de pagina die je zoekt niet vinden. Maar geen zorgen, we helpen je graag verder!",
      "backToHome": "Terug naar Home",
      "a11y": {
        "imageAlt": "404 fout illustratie",
        "backToHomeDescription": "Navigeer terug naar de startpagina"
      }
    },
    "MeasuringTool": {
      "metaData": {
        "title": "Meetinstructies Gumax® glazen schuifwand",
        "description": "Gebruik onze meetinstructies tool voor het nauwkeurig inmeten van je Gumax® glazen schuifwand"
      },
      "heading": "Meetinstructies Gumax<sup>®</sup> glazen schuifwand",
      "tabs": {
        "wallProfileHeight": "Hoogte muurprofiel",
        "heightBottomGutter": "Hoogte onderkant goot"
      },
      "a11y": {
        "measuringToolVideoTitle": "Meetinstructies Gumax® glazen schuifwand - Nieuwe Gumax® overkapping",
        "measuringToolVideoAlt": "Video met meetinstructies voor de Gumax® glazen schuifwand, inclusief tips voor het meten van de hoogte en afloop van de terrasoverkapping.",
        "calculatorTabsLabel": "Hoogte berekening opties",
        "MeasuringSlopeAlt": "Afbeelding die laat zien hoe de afschot van het terras gemeten wordt",
        "MeasuringHeightPavingAlt": "Het meten van de hoogte vanaf bestaande bestrating tot de onderkant van de goot van de Tuinmaximaal terrasoverkapping met een meetlint, essentieel voor het plaatsen van glazen schuifwanden.",
        "MeasuringHeightRecessedAlt": "Nauwkeurig meten van de installatiehoogte voor Tuinmaximaal glazen schuifwanden vanaf een verzonken funderingsgoot tot het bovenframe van de terrasoverkapping.",
        "MeasuringWidthFrontAlt": "Demonstratie van het meten van de vrije voorzijde tussen de palen van de Tuinmaximaal terrasoverkapping met een meetlint voor het bestellen van de juiste maat glazen schuifwanden.",
        "MeasuringWidthSideAlt": "Het meten van de zijdelingse diepte van een Tuinmaximaal terrasoverkapping, van de huismuur tot een buitenste steunpaal, om een goede passing van glazen schuifwanden te verzekeren."
      }
    }
  },
  "Components": {
    "Header": {
      "a11y": {
        "logoAriaLabel": "Tuinmaximaal homepage",
        "mainNavigation": "Hoofdnavigatie",
        "siteHeader": "Sitebalk"
      }
    },
    "StoreSelection": {
      "selectCountry": "Selecteer je land",
      "areYouFrom": "Kom je uit {country}?",
      "otherCountryPreference": "Voorkeur voor een ander land?",
      "saveSelection": "Mijn selectie bewaren voor een volgend bezoek."
    },
    "StoreCard": {
      "selectCountry": "Selecteer land",
      "goToStore": "Ga verder naar de Nederlandse webshop",
      "a11y": {
        "flagAlt": "Vlag van {country}"
      }
    },
    "Form": {
      "Common": {
        "yes": "Ja",
        "no": "Nee",
        "info": "Info",
        "moreInformation": "Meer informatie",
        "recommendation": "Aanbeveling",
        "depthVeranda": "Diepte terrasoverkapping",
        "depthVerandaTooltip": "Meet de diepte van uw terrasoverkapping van de muur tot aan de voorkant van de goot. Deze maat beïnvloedt de benodigde specificaties als u de schuifwanden onder een bestaande terrasoverkapping plaatst en is relevant voor de context van de installatie.",
        "MeasuringWidthSideCaption": "Het meten van de diepte van de terrasoverkapping vanaf de muur tot de voorzijde.",
        "slope": "Afloop van uw terras",
        "slopeTooltip": "Controleer of uw terras afloopt (helling heeft) en meet het hoogteverschil over de diepte van de terrasoverkapping. Als uw terras afloopt richting de tuin, moet u dit verschil compenseren bij het bepalen van de montagehoogte van het muurprofiel; de doorloophoogte blijft gelijk. Houd ook rekening met de 18 mm hoogte van de onderrail indien u van plan bent deze te verzinken, aangezien dit de totale berekeningen kan beïnvloeden.",
        "MeasuringSlopeCaption": "Het bepalen van de afloop van het terras en het hoogteverschil.",
        "MeasuringWidthFrontCaption": "Het meten van de voorzijde van de terrasoverkapping.",
        "slopePlaceholder": "Afloop terras",
        "measurementUnitMm": "mm",
        "measurementUnitMeter": "meter",
        "unitLabel": "Eenheid: {unit}",
        "calculatePassageHeight": "Bereken doorloophoogte onderkant goot",
        "calculateBottomWallProfileHeight": "Bereken hoogtes muurprofiel",
        "passageHeightResult": "De berekende doorloophoogte onderkant goot is: <strong>{result} mm</strong>.",
        "rangeSuccess": "Kies doorloophoogte railsysteem: <strong>{min} - {max} mm</strong>.",
        "validationErrors": {
          "selectOption": "Selecteer een optie",
          "enterNumber": "Voer een getal in",
          "integerOnly": "Alleen hele millimeters zijn toegestaan",
          "validNumberRequired": "Voer een geldig getal in",
          "suggestionMessage": "Probeer een {fieldName} van {recommendedInput} mm om binnen het bereik van {min} - {max} mm te vallen.",
          "wallProfileHeightFieldName": "muurprofielhoogte",
          "passageHeightFieldName": "doorloophoogte"
        }
      },
      "WallProfileHeight": {
        "label": "Hoogte onderkant muurprofiel t.o.v. bodem (0° afloop)",
        "placeholder": "Hoogte tot onderkant muurprofiel",
        "tooltip": "Dit is de hoogte waarop het muurprofiel (waaraan de terrasoverkapping of het bovenste deel van de schuifwandconstructie is bevestigd) aan de gevel wordt gemonteerd, gemeten vanaf de grond. Bij een terras zonder helling (0°), komt deze hoogte direct overeen met de waarde uit de tabellen/meethulp, gebaseerd op uw gewenste doorloophoogte en diepte.",
        "railSystemQuestion": "Railsysteem verzonken neerleggen",
        "railSystemQuestionTooltip": "Overweeg of u de onderrail van het schuifsysteem in de grond wilt verzinken. Dit zorgt voor een drempelloze doorgang. Als u hiervoor kiest, tel dan 18 mm (de hoogte van de onderrail) op bij de gemeten doorloophoogte.",
        "MeasuringHeightPavingCaption": "Het meten van de verticale hoogte vanaf de grond voor profielmontage.",
        "MeasuringHeightRecessedCaption": "Voorbeeld van een verzonken railsysteem voor een drempelloze doorgang."
      },
      "HeightBottomGutter": {
        "label": "Hoogte onderkant goot t.o.v. bodem (0° afloop)",
        "placeholder": "Hoogte tot onderkant goot",
        "tooltip": "Dit is de \"doorloophoogte\": de afstand tussen de bovenkant van uw fundering/bestrating en de vlakke onderzijde van de goot van uw (bestaande) terrasoverkapping. Meet dit op drie punten (links, midden, rechts) en gebruik de laagst gemeten waarde. Bij een terras zonder helling (0°) is dit de directe verticale maat.",
        "MeasuringHeightPavingCaption": "Het meten van de hoogte vanaf de grond tot de onderkant van de goot.",
        "wallProfileHeightsResultTitle": "De berekende hoogtes muurprofiel:",
        "bottomWallProfileHeightLabel": "Onderzijde muurprofiel: <strong>{height} mm</strong>",
        "topWallProfileHeightLabel": "Bovenzijde muurprofiel: <strong>{height} mm</strong>",
        "walkthroughHeightRangeLabel": "Kies doorloophoogte railsysteem: <strong>{min} - {max} mm</strong>."
      }
    }
  },
  "Video": {
    "playVideoAriaLabel": "Video afspelen over {title}"
  }
}
</file>

</files>
